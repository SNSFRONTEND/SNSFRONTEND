<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SNS前端团队</title>
  <icon>https://www.gravatar.com/avatar/6f11d878552e5c9aa6131de5e6f92f46</icon>
  <subtitle>点点滴滴-破茧成蝶</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://snsfrontend.crysnower.cn/"/>
  <updated>2018-06-05T07:21:07.103Z</updated>
  <id>http://snsfrontend.crysnower.cn/</id>
  
  <author>
    <name>SNS前端团队</name>
    <email>stephenzhumail@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何进行自动化测试1</title>
    <link href="http://snsfrontend.crysnower.cn/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%951.html"/>
    <id>http://snsfrontend.crysnower.cn/如何进行自动化测试1.html</id>
    <published>2018-06-04T12:29:23.000Z</published>
    <updated>2018-06-05T07:21:07.103Z</updated>
    
    <content type="html"><![CDATA[<p>测试是一个好的App不可缺少的部分。每一个App都是由一个个小的功能组合到一起的。而这些小的功能又是由一个个函数或者说算法组合到一起的。单元测试就是对这些小的功能或者函数进行测试，良好的单元测试会让代码的健壮性提高很多。XCTest就是XCode为我们提供的一个框架，它提供了各个层次的测试。</p><p>###XCTestCase</p><p>每个XCode创建iOS的工程中都有一个叫做”工程名Tests”的分组，这个分组里就是XCTestCase的子类，XCTest中的测试类都是继承自XCTestCase。<br>例如新建一个工程，命名为Demo，就能看到如图<br><img src="https://img-blog.csdn.net/20150628124157802" alt="alt text"></p><p>看一下这个自动创建的文件里都包含了哪些内容</p><pre><code>#import <uikit uikit.h="">#import <xctest xctest.h="">@interface DemoTests : XCTestCase@end@implementation DemoTests- (void)setUp {    [super setUp];    // Put setup code here. This method is called before the invocation of each test method in the class.}- (void)tearDown {    // Put teardown code here. This method is called after the invocation of each test method in the class.    [super tearDown];}- (void)testExample {    // This is an example of a functional test case.    XCTAssert(YES, @"Pass");}- (void)testPerformanceExample {    // This is an example of a performance test case.    [self measureBlock:^{        // Put the code you want to measure the time of here.    }];}@end</xctest></uikit></code></pre><p>测试用例的命名</p><p>XCTest中所有的测试用例的命名都是以test开头的。例如上文中的</p><pre><code>- (void)testExample {    // This is an example of a functional test case.    XCTAssert(YES, @"Pass");}</code></pre><p>setUp和tearDown</p><p>Setup是在所有测试用例运行之前运行的函数，在这个测试用例里进行一些通用的初始化工作<br>tearDown是在所有的测试用例都执行完毕后执行的</p><p>XCode的测试用例导航</p><p>测试用例的导航如图，在测试用例的导航里，我们可以运行一组测试用例，也可以运行一个单独的测试用例<br><img src="https://img-blog.csdn.net/20150628131230182" alt="alt text"></p><p>可以鼠标右键来新建一组测试用例。<br><img src="https://img-blog.csdn.net/20150628131246844" alt="alt text"></p><p>也可以为测试用例添加失败断点来方便我们调试<br><img src="https://img-blog.csdn.net/20150628131644732" alt="alt text"></p><p>查看测试结果</p><p>通过测试导航栏可以查看到测试结果<br><img src="https://img-blog.csdn.net/20170219104154699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGVsbG9fSHdj/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="alt text"></p><p>通过Report导航栏可以看到更详细的测试结果<br><img src="https://img-blog.csdn.net/20170219104259748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGVsbG9fSHdj/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="alt text"><br>点击测试用例后面的箭头，可以跳转到测试用例的代码。</p><p>普通方法测试</p><p>例如，新建一个类命名为Model，他有这个方法用来生成10以内的随机数。</p><pre><code>-(NSInteger)randomLessThanTen{    return arc4random()%10;}</code></pre><p>于是，测试方法为</p><pre><code>-(void)testModelFunc_randomLessThanTen{    Model * model = [[Model alloc] init];    NSInteger num = [model randomLessThanTen];    XCTAssert(num<10,@"num should="" less="" than="" 10");="" }="" <="" code=""></10,@"num></code></pre><p>我们点击如图的左边图标单独运行这个测试用例，当然也可以在上文我提到的导航栏里单独运行。 </p><p>然后会看到输出表示这个测试用例通过</p><pre><code>Test Suite 'Selected tests' started at 2015-06-28 05:24:56 +0000Test Suite 'DemoTests.xctest' started at 2015-06-28 05:24:56 +0000Test Suite 'DemoTests' started at 2015-06-28 05:24:56 +0000Test Case '-[DemoTests testModelFunc_randomLessThanTen]' started.Test Case '-[DemoTests testModelFunc_randomLessThanTen]' passed (0.000 seconds).Test Suite 'DemoTests' passed at 2015-06-28 05:24:56 +0000.     Executed 1 test, with 0 failures (0 unexpected) in 0.000 (0.001) secondsTest Suite 'DemoTests.xctest' passed at 2015-06-28 05:24:56 +0000.     Executed 1 test, with 0 failures (0 unexpected) in 0.000 (0.001) secondsTest Suite 'Selected tests' passed at 2015-06-28 05:24:56 +0000.</code></pre><p>常用断言</p><p>如何判断一个测试用例成功或者失败呢？XCTest使用断言来实现。 </p><p>最基本的断言 </p><p>表示如果expression满足，则测试通过，否则对应format的错误。</p><pre><code>XCTAssert(expression, format...)</code></pre><p>还有一个用来直接Fail的断言</p><pre><code>XCTFail(format...)</code></pre><p>其他一些常用的断言：</p><pre><code>XCTAssertTrue(expression, format...)XCTAssertFalse(expression, format...)XCTAssertEqual(expression1, expression2, format...)XCTAssertNotEqual(expression1, expression2, format...)XCTAssertEqualWithAccuracy(expression1, expression2, accuracy, format...)XCTAssertNotEqualWithAccuracy(expression1, expression2, accuracy, format...)XCTAssertNil(expression, format...)XCTAssertNotNil(expression, format...)</code></pre><p>性能测试</p><p>所谓性能测试，主要就是评估一段代码的运行时间，XCTest的性能的测试利用如下格式</p><pre><code>- (void)testPerformanceExample {    // This is an example of a performance test case.    [self measureBlock:^{        // Put the code you want to measure the time of here.    }];}</code></pre><p>例如，我要评估一段代码，循环打印NSLog 10000次。<br>这段代码如下，这段代码我放在UIImage的类别里。</p><pre><code>- (void)testPerformanceExample {    // This is an example of a performance test case.    [self measureBlock:^{        for (NSInteger index = 0; index < 10000; index ++) {            NSLog(@"%ld",index);        }        // Put the code you want to measure the time of here.    }];}</code></pre><p>我们都知道，测试要么成功，要么失败，那么就引入了一个关键的问题</p><p>性能测试的时候，如何判一个性能测试case是成功还是失败呢？<br>我们先通过上文的方式，只运行一次这个测试用例。然后看看结果和输出（这个测试用例跑的很慢，别着急）</p><pre><code>Test Case '-[ModelTests testPerformanceExample]' failed (37.432 seconds).Test Suite 'ModelTests' failed at 2017-02-19 09:57:26.210.     Executed 1 test, with 1 failure (0 unexpected) in 37.432 (37.433) secondsTest Suite 'ToDoTests.xctest' failed at 2017-02-19 09:57:26.211.     Executed 1 test, with 1 failure (0 unexpected) in 37.432 (37.434) secondsTest Suite 'Selected tests' failed at 2017-02-19 09:57:26.211.     Executed 1 test, with 1 failure (0 unexpected) in 37.432 (37.437) secondsTest session log:    /Users/hl/Library/Developer/Xcode/DerivedData/ToDo-bbcdkwvzbmyznocgystdcavfakca/Logs/Test/98E0FA82-BACC-4361-AF39-E0734F73A545/Session-ToDoTests-2017-02-19_095641-jm2eKF.log</code></pre><p>然后，你会发现测试失败了！这是因为我们没有给性能测试一个参考时间。<br>我们点击图中的的第二个叉箭头<br><img src="https://img-blog.csdn.net/20170219100241316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGVsbG9fSHdj/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="alt text"></p><p>然后，看到如图<br><img src="https://img-blog.csdn.net/20170219100409593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGVsbG9fSHdj/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="alt text"></p><p>我们来看看这几个参数都是啥意思：</p><p>Baseline 计算标准差的参考值</p><p>MAX STDD 最大允许的标准差</p><p>底部点击1，2…10可以看到每次运行的结果。</p><p>点击Edit，我们点击Average的右边的Accept，来让本次运行的平均值设置为baseline，然后然后MAX STDD改为40%。再运行这个测试用例，你会发现测试成功了。</p><p>异步测试</p><p>异步测试的逻辑如下，首先定义一个或者多个XCTestExpectation，表示异步测试想要的结果。然后设置timeout，表示异步测试最多可以执行的时间。最后，在异步的代码完成的最后，调用fullfill来通知异步测试满足条件。</p><pre><code>- (void)testAsyncFunction{    XCTestExpectation * expectation = [self expectationWithDescription:@"Just a demo expectation,should pass"];    //Async function when finished call [expectation fullfill]    [self waitForExpectationsWithTimeout:10 handler:^(NSError *error) {        //Do something when time out    }];}</code></pre><p>举例</p><pre><code>Test Suite 'Selected tests' started at 2015-06-28 05:49:43 +0000Test Suite 'DemoTests.xctest' started at 2015-06-28 05:49:43 +0000Test Suite 'DemoTests' started at 2015-06-28 05:49:43 +0000Test Case '-[DemoTests testAsyncFunction]' started.2015-06-28 13:49:44.920 Demo[2157:145428] Async testTest Case '-[DemoTests testAsyncFunction]' passed (1.006 seconds).Test Suite 'DemoTests' passed at 2015-06-28 05:49:44 +0000.     Executed 1 test, with 0 failures (0 unexpected) in 1.006 (1.007) secondsTest Suite 'DemoTests.xctest' passed at 2015-06-28 05:49:44 +0000.     Executed 1 test, with 0 failures (0 unexpected) in 1.006 (1.009) secondsTest Suite 'Selected tests' passed at 2015-06-28 05:49:44 +0000.</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试是一个好的App不可缺少的部分。每一个App都是由一个个小的功能组合到一起的。而这些小的功能又是由一个个函数或者说算法组合到一起的。单元测试就是对这些小的功能或者函数进行测试，良好的单元测试会让代码的健壮性提高很多。XCTest就是XCode为我们提供的一个框架，它提供
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WKWebView白屏之坑</title>
    <link href="http://snsfrontend.crysnower.cn/WKWebView%E7%99%BD%E5%B1%8F%E4%B9%8B%E5%9D%91.html"/>
    <id>http://snsfrontend.crysnower.cn/WKWebView白屏之坑.html</id>
    <published>2018-06-04T11:49:00.000Z</published>
    <updated>2018-06-05T07:21:07.102Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>最近项目中使用了WKWebView展示echarts图表。起初效果很好，但是长时间测试后发现，WKWebView会出现白屏现象。百度了一番后，发现很多朋友遇到了同样的问题（例如这一篇<a href="https://www.jianshu.com/p/2a6cd16aceaa）。" target="_blank" rel="noopener">https://www.jianshu.com/p/2a6cd16aceaa）。</a><br>所以一开始也把白屏现象归罪于WKWebView的bug，寻思着从WK着手去解决问题。</p><h5 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h5><p>白屏现象难复现，所以在发生白屏后，只能用flex来看view的层次<br><img src="/images/dy20180604201306095.jpg" alt="白屏前"><br><img src="/images/dy20180604201317886.jpg" alt="白屏后"></p><p>两张图对比之后可以看到，白屏之后上层的WKCompsitingView都消失了。是否可以通过判断WKWebView是否存在WKCompsitingView来判断是否白屏？下面的代码用于统计WKWebView当前一共包含多少WKCompsitingView。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)getWKCompositingViewCount:(<span class="built_in">UIView</span> *)view withCount:(<span class="built_in">NSInteger</span> *)count&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subview <span class="keyword">in</span> view.subviews) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([subview isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"WKCompositingView"</span>)]) &#123;</span><br><span class="line">            *count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (subview.subviews.count) &#123;</span><br><span class="line">            [<span class="keyword">self</span> getWKCompositingViewCount:subview withCount:count];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="built_in">NSInteger</span> count = <span class="number">0</span>;</span><br><span class="line">[<span class="keyword">self</span> getWKCompositingViewCount:weakSelf.myWebView withCount:&amp;count];</span><br></pre></td></tr></table></figure><p>在执行js之前，只要发现count == 0 就执行[webview reload];</p><p>这段代码是否能填满这个坑呢？经过一系列折腾之后，白屏终于复现了，而且日志显示webview也reload了，但是依然是白屏、、、是不是wk的某种释放机制把相关的H5资源，所以reload没有效果？那重新loadRequest 是否可行呢？结果~~~还是白屏。</p><h5 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h5><p>已经过去2天了，白屏问题仍然没有解决。但是经过了两天的折腾，我们总结出了下列几种现象，尽管都是白屏，但原因并不相同。</p><table><thead><tr><th>1.WKWebView的URL为空，出现白屏，这种现象可以通过loadRequest解决</th></tr></thead><tbody><tr><td>2.WKWebView的URL不空，出现白屏，这种现象无论是reload还是loadRequest都不能刷出网页</td></tr><tr><td>3.WKWebView的URL不空，显示背景图片，但是echarts图表不显示，reload和loadRequest都无效</td></tr><tr><td>4.WKWebView的URL不空，背景图片不显示，echarts图表能显示，reload和loadRequest都无效</td></tr></tbody></table><p>现象3和4不能说是白屏，但应该跟白屏现象存在一定的关系。</p><p>现象1很快就解决了，只要在执行js方法之前判断WKWebView的URL是否为空，重新loadRequest就能出网页。</p><p>而2~4无论怎么reload或者loadRequest都没有效果，但它们的共同点都是似乎某种资源加载失败了，也许是wk的某种机制把加载过的资源释放了。</p><p>于是尝试在本地html中加入资源加载的监听，只要发生错误，就调用location.reload();重载当前文档。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监控资源加载错误(img,script,css,以及jsonp)</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"==="</span> + e.message + <span class="string">"==="</span>);</span><br><span class="line">            location.reload();</span><br><span class="line">        &#125;, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">errorMessage, scriptURI, lineNumber, columnNumber, errorObj</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"错误信息："</span>, errorMessage);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"出错文件："</span>, scriptURI);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"出错行号："</span>, lineNumber);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"出错列号："</span>, columnNumber);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"错误详情："</span>, errorObj);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>（注:这段代码要放在head内，并且css不能内联）至此，1-4现象再也没复现过，是否完全解决，后续测试中再持续关注。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h5&gt;&lt;p&gt;最近项目中使用了WKWebView展示echarts图表。起初效果很好，但是长时间测试后发现，WKWebView会出现白屏现象。百度了一番后
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
      <category term="白屏" scheme="http://snsfrontend.crysnower.cn/tags/%E7%99%BD%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java反射完全解析1</title>
    <link href="http://snsfrontend.crysnower.cn/Java%E5%8F%8D%E5%B0%84%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901-1.html"/>
    <id>http://snsfrontend.crysnower.cn/Java反射完全解析1-1.html</id>
    <published>2018-06-02T08:14:00.000Z</published>
    <updated>2018-06-04T01:04:46.040Z</updated>
    
    <content type="html"><![CDATA[<p>按例，首先描述定义一下。</p><blockquote><p>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.<br>通过反射，Java代码可以发现有关已加载类的字段，方法和构造函数的信息，并可以在安全限制内对这些字段，方法和构造函数进行操作。</p></blockquote><p>简而言之，你可以在运行状态中通过反射机制做到：</p><ul><li>对于任意一个类，都能够知道这个类的所有属性和方法；</li><li>对于任意一个对象，都能够调用它的任意一个方法和属性;</li></ul><p>这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>在我看来我们平时使用Java反射主要涉及两个类(接口)<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html" target="_blank" rel="noopener"><code>Class</code></a>， <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html" target="_blank" rel="noopener"><code>Member</code></a>，如果把这两个类搞清楚了，反射基本就ok了。</p><p>#Class<br>提到反射就不得不提到Class，Class可以说是反射能够实现的基础；注意这里说的Class与class关键字<strong>不是同一种东西</strong>。class关键字是在声明java类时使用的；而Class 是java JDK提供的一个类,完整路径为 <code>java.lang.Class</code>，本质上与Math, String 或者你自己定义各种类没什么区别。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final class Class&lt;T&gt; implements java.io.Serializable, GenericDeclaration, Type, AnnotatedElement &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那Class到底在反射中起到什么作用呢？</p><blockquote><p>For every type of object, the Java virtual machine instantiates an immutable instance of <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html" target="_blank" rel="noopener"><code>java.lang.Class</code></a> which provides methods to examine the runtime properties of the object including its members and type information. <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html" target="_blank" rel="noopener"><code>Class</code></a> also provides the ability to create new classes and objects. Most importantly, it is the entry point for all of the Reflection APIs.</p></blockquote><p>对于每一种类，Java虚拟机都会初始化出一个Class类型的实例，每当我们编写并且编译一个新创建的类就会产生一个对应Class对象，并且这个Class对象会被保存在同名.class文件里。当我们new一个新对象或者引用静态成员变量时，Java虚拟机(JVM)中的类加载器系统会将对应Class对象加载到JVM中，然后JVM再根据这个类型信息相关的Class对象创建我们需要实例对象或者提供静态变量的引用值。<br>比如创建编译一个Shapes类，那么，JVM就会创建一个Shapes对应Class类的Class实例，该Class实例保存了Shapes类相关的类型信息，包括属性，方法，构造方法等等，通过这个Class实例可以在运行时访问Shapes对象的属性和方法等。另外通过Class类还可以创建出一个新的Shapes对象。这就是反射能够实现的原因，可以说Class是反射操作的基础。<br>需要特别注意的是，每个class（注意class是小写，代表普通类）类，无论创建多少个实例对象，在JVM中都对应同一个Class对象。</p><p>下面就通过一个简单的例子来说明如何通过反射实例化一个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Animal &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Animal(String name, int age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Animal : name = &quot; + name + &quot; age = &quot; + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public class TestReflection&#123;</span><br><span class="line">    private static final String TAG = &quot;Reflection&quot;;</span><br><span class="line">    public void testReflection()&#123;</span><br><span class="line">        //获取Animal类的Class对象</span><br><span class="line">        Class c = Animal.class;</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过Class对象反射获取Animal类的构造方法</span><br><span class="line">            Constructor constructor = c.getConstructor(String.class, int.class);</span><br><span class="line">            //调用构造方法获取Animal实例</span><br><span class="line">            Animal animal = (Animal) constructor.newInstance( &quot;Jack&quot;, 3);</span><br><span class="line">            //将构造出来的Animal对象打印出来</span><br><span class="line">            Log.d(TAG, animal.toString());</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们来看下打印值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">03-28 20:12:00.958 2835-2835/? D/Reflection: Animal : name = Jack age = 3</span><br></pre></td></tr></table></figure></p><p>可以看出我们确实成功构造出了Animal对象，而且在这过程中Class功不可没。</p><p>有人说你这也太费事了，都知道Animal对象了，我分分钟就能给你new出来了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = new Animal(&quot;Jack&quot;, 3);</span><br></pre></td></tr></table></figure></p><p>没错！<br>但是如果并不能直接导入Animal类呢，如果构造方法都是private的呢？这个时候反射就能大展身手了。</p><p>####如何获取Class<br>说Class是反射能够实现的基础的另一个原因是：Java反射包<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html" target="_blank" rel="noopener"><code>java.lang.reflect</code></a>中的所有类都没有public构造方法，要想获得这些类实例，只能通过Class类获取。所以说如果想使用反射，必须得获得Class对象。<br>下面列举了几种能够获取Class对象的方法。</p><ul><li><strong>Object.getClass()</strong><br>通过对象实例获取对应Class对象，如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//Returns the Class for String</span><br><span class="line">Class c = &quot;foo&quot;.getClass();</span><br><span class="line"></span><br><span class="line">enum E &#123; A, B &#125;</span><br><span class="line">//Returns the Class corresponding to the enumeration type E.</span><br><span class="line">Class c = A.getClass();</span><br><span class="line"></span><br><span class="line">byte[] bytes = new byte[1024];</span><br><span class="line">//Returns the Class corresponding to an array with component type byte.</span><br><span class="line">Class c = bytes.getClass();</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; s = new HashSet&lt;String&gt;();</span><br><span class="line">//Returns the Class corresponding to java.util.HashSet.</span><br><span class="line">Class c = s.getClass();</span><br></pre></td></tr></table></figure></li></ul><p>然而对于基本类型无法使用这种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean b;</span><br><span class="line">Class c = b.getClass();   // compile-time error</span><br></pre></td></tr></table></figure></p><ul><li><p><strong>The .class Syntax</strong><br>通过类的类型获取Class对象,基本类型同样可以使用这种方法，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//The `.class` syntax returns the Class corresponding to the type `boolean`.</span><br><span class="line">Class c = boolean.class;  </span><br><span class="line"></span><br><span class="line">//Returns the Class for String</span><br><span class="line">Class c = String.class;</span><br></pre></td></tr></table></figure></li><li><p><strong>Class.forName()</strong><br>通过类的全限定名获取Class对象， 基本类型无法使用此方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(&quot;java.lang.String&quot;);</span><br></pre></td></tr></table></figure></li></ul><p>对于数组比较特殊<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class cDoubleArray = Class.forName(&quot;[D&quot;);    //相当于double[].class</span><br><span class="line"></span><br><span class="line">Class cStringArray = Class.forName(&quot;[[Ljava.lang.String;&quot;);   //相当于String[][].class</span><br></pre></td></tr></table></figure></p><ul><li><p><strong>TYPE Field for Primitive Type Wrappers</strong><br>基本类型和void 类型的包装类可以使用TYPE字段获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class c = Double.TYPE;   //等价于 double.class.</span><br><span class="line"></span><br><span class="line">Class c = Void.TYPE;</span><br></pre></td></tr></table></figure></li><li><p><strong>Methods that Return Classes</strong><br>另外还有一些反射方法可以获取Class对象，但前提是你已经获取了一个Class对象。<br>有点拗口，比如说你已经获取了一个类的Class对象，就可以通过反射方法获取这个类的父类的Class对象。</p></li></ul><p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getSuperclass--" target="_blank" rel="noopener"><code>Class.getSuperclass()</code></a><br>获得给定类的父类Class</p><pre><code>// javax.swing.JButton的父类是javax.swing.AbstractButtonClass c = javax.swing.JButton.class.getSuperclass();</code></pre><p>类似方法还有：<br>Class.getClasses()<br>Class.getDeclaredClasses()<br>Class.getDeclaringClass()<br>Class.getEnclosingClass()<br>java.lang.reflect.Field.getDeclaringClass()<br>java.lang.reflect.Method.getDeclaringClass()<br>java.lang.reflect.Constructor.getDeclaringClass()  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按例，首先描述定义一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reflection enables Java code to discover information about the fields, methods and constructors of loade
      
    
    </summary>
    
      <category term="Android" scheme="http://snsfrontend.crysnower.cn/categories/Android/"/>
    
    
      <category term="java reflection" scheme="http://snsfrontend.crysnower.cn/tags/java-reflection/"/>
    
  </entry>
  
  <entry>
    <title>CAS统一认证中心，针对移动客户端的认证过程设计（APP视角）</title>
    <link href="http://snsfrontend.crysnower.cn/CAS%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81.html"/>
    <id>http://snsfrontend.crysnower.cn/CAS统一认证.html</id>
    <published>2018-05-28T10:24:12.835Z</published>
    <updated>2018-05-29T02:57:24.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CAS统一认证中心，针对移动客户端的认证过程设计（APP视角）"><a href="#CAS统一认证中心，针对移动客户端的认证过程设计（APP视角）" class="headerlink" title="CAS统一认证中心，针对移动客户端的认证过程设计（APP视角）"></a>CAS统一认证中心，针对移动客户端的认证过程设计（APP视角）</h3><ul><li><p>业务场景</p><ul><li>统一认证中心CAS，用员工工号密码登录。</li><li>有个通讯录server系统</li><li>通讯录APP接入两个服务，即登录接CAS，业务接通讯录server</li><li>通讯录APP在用户登录的情况下允许查询其他员工信息</li></ul></li><li><p>简单例子</p><ul><li>通讯录server系统有两个接口，用户信息接口，员工信息查询接口</li></ul></li><li><p>设计过程（未认证）</p><ul><li>APP启动调用通讯录server的接口getUserInfo，用来获取当前用户的基本信息。</li><li>通讯录server后台发现没有登录，返回报文</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"0030"</span>,</span><br><span class="line">    <span class="attr">"errorMessage"</span>: <span class="string">"未登录"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>APP解析返回报文，code==0030，即跳转native登录页面</li><li>登录页面调用cas提供的登录接口</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://cas.domain.com/login.do?userName=<span class="number">66647</span>&amp;password=<span class="number">12345</span>&amp;jsonView=<span class="literal">true</span>&amp;rememberMe=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">userName:工号</span><br><span class="line">password:密码</span><br><span class="line">jsonView:是否返回json，因为大多情况下，CAS被设计成支持web鉴权</span><br><span class="line">rememberMe:是否开启记住会话</span><br></pre></td></tr></table></figure><ul><li>如果登陆成功，CAS会返回一些cookies</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NSHTTPCookie</span></span></span><br><span class="line"><span class="tag"><span class="attr">version:0</span></span></span><br><span class="line"><span class="tag"><span class="attr">name:TGC</span></span></span><br><span class="line"><span class="tag"><span class="attr">value:TGTCF84007422EAD5E7CED12D9658AF05D1716F52B9</span></span></span><br><span class="line"><span class="tag"><span class="attr">expiresDate:</span>'(<span class="attr">null</span>)'</span></span><br><span class="line"><span class="tag"><span class="attr">created:</span>'<span class="attr">2018-05-28</span> <span class="attr">12:23:04</span> +<span class="attr">0000</span>'</span></span><br><span class="line"><span class="tag"><span class="attr">sessionOnly:TRUE</span></span></span><br><span class="line"><span class="tag"><span class="attr">domain:cas.domain.com</span></span></span><br><span class="line"><span class="tag"><span class="attr">partition:none</span></span></span><br><span class="line"><span class="tag"><span class="attr">path:</span>/<span class="attr">ids</span>/</span></span><br><span class="line"><span class="tag"><span class="attr">isSecure:FALSE</span></span></span><br><span class="line"><span class="tag"><span class="attr">isHTTPOnly:</span> <span class="attr">YES</span></span></span><br><span class="line"><span class="tag"> <span class="attr">path:</span>"/<span class="attr">ids</span>/" <span class="attr">isSecure:FALSE</span> <span class="attr">isHTTPOnly:</span> <span class="attr">YES</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果开启了rememberMe，则会多一条cookie</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NSHTTPCookie</span></span></span><br><span class="line"><span class="tag"><span class="attr">version:0</span></span></span><br><span class="line"><span class="tag"><span class="attr">name:cas_r_me</span></span></span><br><span class="line"><span class="tag"><span class="attr">value:MTcxMjAwNTFfQlJPV1NFUl8xNTI3NTA2MTQyMDkyXzE1Mjc1MTAxODQ5NzBfMl9iNjgzNTM1N2I5</span>%<span class="attr">0D</span>%<span class="attr">0AZTZlZGE0NjZjOWI1ODFkMDVmMDAxYw</span>%<span class="attr">3D</span>%<span class="attr">3D</span>%<span class="attr">0D</span>%<span class="attr">0A</span></span></span><br><span class="line"><span class="tag"><span class="attr">expiresDate:</span>'<span class="attr">2018-06-07</span> <span class="attr">11:23:04</span> +<span class="attr">0000</span>'</span></span><br><span class="line"><span class="tag"><span class="attr">created:</span>'<span class="attr">2018-05-28</span> <span class="attr">12:23:04</span> +<span class="attr">0000</span>'</span></span><br><span class="line"><span class="tag"><span class="attr">sessionOnly:FALSE</span></span></span><br><span class="line"><span class="tag"><span class="attr">domain:cas.domain.com</span></span></span><br><span class="line"><span class="tag"><span class="attr">partition:none</span></span></span><br><span class="line"><span class="tag"><span class="attr">path:</span>/</span></span><br><span class="line"><span class="tag"><span class="attr">isSecure:FALSE</span></span></span><br><span class="line"><span class="tag"><span class="attr">isHTTPOnly:</span> <span class="attr">YES</span></span></span><br><span class="line"><span class="tag"> <span class="attr">path:</span>"/" <span class="attr">isSecure:FALSE</span> <span class="attr">isHTTPOnly:</span> <span class="attr">YES</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>APP重新调用server的getUserInfo接口，如果有机制能自动重掉当然更好，类似于web的302</li><li>后台正常返回数据</li><li>app进入首页</li></ul></li><li><p>防止恶意破解(认证过程)</p><ul><li><p>调用CAS登陆接口失败多次，服务器一般会锁定当前IP或者其他策略，手段就是让用户人工介入输入动态图形验证码。</p></li><li><p>CAS会告知，请求需要验证码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"needVerifyCode"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"errorCode"</span>: <span class="string">"badVerifyCode"</span>,</span><br><span class="line"><span class="attr">"tgtTimeoutOrKickoff"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"res_code"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"res_message"</span>: <span class="string">"errorCode"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取验证码，根据”errorCode”: “badVerifyCode”,</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://passport.csdn.net/ajax/verifyhandler.ashx?uuid=xxxxxx</span><br></pre></td></tr></table></figure></li><li><p>登陆过程改造</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://cas.domain.com/login.do?userName=<span class="number">66647</span>&amp;password=<span class="number">12345</span>&amp;jsonView=<span class="literal">true</span>&amp;rememberMe=<span class="literal">true</span>&amp;verifyCode=<span class="number">8562</span>&amp;uuid=<span class="number">9</span>DLCN-DL8CL3</span><br><span class="line"></span><br><span class="line">userName:工号</span><br><span class="line">password:密码</span><br><span class="line">jsonView:是否返回json，因为大多情况下，CAS被设计成支持web鉴权</span><br><span class="line">rememberMe:是否开启记住会话</span><br><span class="line">verifyCode:验证码，在某些情况下，服务器认为用户恶意尝试登陆，会有保护策略。</span><br><span class="line">uuid:用来确定验证码的uuid</span><br><span class="line">注：如果后台服务端强大，对验证码的管理不是通过uuid，而是通过会话识别对应，那么登录接口就无需uuid，生成图形验证码的时候也无需uuid</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设计过程(已认证)</p><ul><li>APP启动调用server接口getUserInfo</li><li>获取得到用户信息</li><li>进入首页</li></ul></li><li><p>持久化会话</p><ul><li><p>保存cookie</p><p>保存name为cas_r_me的cookie，如何保存cookie，具体方法不累赘。</p></li><li><p>logout需要清空保存的cookie</p><p>删除本地缓存的所有cookie，具体方法不累赘。</p></li><li><p>更新cookie</p><p>在每一次APP启动，获取用户信息接口之后，更新保存的cookie，因为cookie有expiresDate，如果一直用第一次登录的那个，就算每天都登录，迟早会失效，这是我们不希望看到的。</p></li><li><p>使用cookie</p><p>每次打开app，加载本地保存的cookie到会话管理器，并激活生效。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CAS统一认证中心，针对移动客户端的认证过程设计（APP视角）&quot;&gt;&lt;a href=&quot;#CAS统一认证中心，针对移动客户端的认证过程设计（APP视角）&quot; class=&quot;headerlink&quot; title=&quot;CAS统一认证中心，针对移动客户端的认证过程设计（APP视角
      
    
    </summary>
    
      <category term="APP" scheme="http://snsfrontend.crysnower.cn/categories/APP/"/>
    
    
      <category term="CAS" scheme="http://snsfrontend.crysnower.cn/tags/CAS/"/>
    
      <category term="单点登录" scheme="http://snsfrontend.crysnower.cn/tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>iCarousel实现轮播(带缩放效果)</title>
    <link href="http://snsfrontend.crysnower.cn/iCarousel%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD-%E5%B8%A6%E7%BC%A9%E6%94%BE%E6%95%88%E6%9E%9C.html"/>
    <id>http://snsfrontend.crysnower.cn/iCarousel实现轮播-带缩放效果.html</id>
    <published>2018-05-26T02:30:00.000Z</published>
    <updated>2018-05-26T06:46:49.614Z</updated>
    
    <content type="html"><![CDATA[<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="/images/gif5.gif" alt="轮播效果"></p><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>这是iCarousel自定义部分的关键代码，iCarousel的用法大家应该都知道，没接触过的可以百度，这里就不贴其他代码啦<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CATransform3D</span>)carousel:(iCarousel *)carousel itemTransformForOffset:(<span class="built_in">CGFloat</span>)offset baseTransform:(<span class="built_in">CATransform3D</span>)transform&#123;</span><br><span class="line">    transform = <span class="built_in">CATransform3DTranslate</span>(transform, offset * (bannerwidth), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">CGFloat</span> scalex = MAX(<span class="number">0</span>, (<span class="number">1</span>-(<span class="number">6.0</span>/bannerwidth * fabs(offset))));</span><br><span class="line">    <span class="built_in">CGFloat</span> scaley = MAX(<span class="number">0</span>, (<span class="number">1</span>-(<span class="number">12.0</span>/(<span class="number">130.0</span>) * fabs(offset))));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CATransform3DScale</span>(transform, scalex, scaley, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><h6 id="itemTransformForOffset-CGFloat-offset"><a href="#itemTransformForOffset-CGFloat-offset" class="headerlink" title="itemTransformForOffset:(CGFloat)offset"></a>itemTransformForOffset:(CGFloat)offset</h6><p>offset 是item的索引</p><p>offset == 0是当前展示的item</p><p>offset &lt;  0是当前展示item左边的item</p><p>offset &gt;  0是当前展示item右边的item</p><h6 id="baseTransform-CATransform3D-transform"><a href="#baseTransform-CATransform3D-transform" class="headerlink" title="baseTransform:(CATransform3D)transform"></a>baseTransform:(CATransform3D)transform</h6><p>transform 是iCarousel的基础变换，对应到每个item<br>在xcode查看的层次是这样的<br><img src="/images/dy20180526104944193.jpg" alt="轮播效果"></p><h6 id="transform-CATransform3DTranslate-transform-offset-bannerwidth-0-0"><a href="#transform-CATransform3DTranslate-transform-offset-bannerwidth-0-0" class="headerlink" title="transform = CATransform3DTranslate(transform, offset * (bannerwidth), 0, 0);"></a>transform = CATransform3DTranslate(transform, offset * (bannerwidth), 0, 0);</h6><p>这句代码将每个item按照offset偏移item的宽度，如下图效果<br><img src="/images/dy20180526105410425.jpg" alt="轮播效果"></p><h6 id="CGFloat-scalex-MAX-0-1-6-0-bannerwidth-fabs-offset"><a href="#CGFloat-scalex-MAX-0-1-6-0-bannerwidth-fabs-offset" class="headerlink" title="CGFloat scalex = MAX(0, (1-(6.0/bannerwidth * fabs(offset))));"></a>CGFloat scalex = MAX(0, (1-(6.0/bannerwidth * fabs(offset))));</h6><p>宽度的缩放比例</p><h6 id="CGFloat-scaley-MAX-0-1-12-0-130-0-fabs-offset"><a href="#CGFloat-scaley-MAX-0-1-12-0-130-0-fabs-offset" class="headerlink" title="CGFloat scaley = MAX(0, (1-(12.0/(130.0) * fabs(offset))));"></a>CGFloat scaley = MAX(0, (1-(12.0/(130.0) * fabs(offset))));</h6><p>高度的缩放比例</p><h6 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/gif5.gif&quot; alt=&quot;轮播效果&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;关键代码&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
      <category term="banner" scheme="http://snsfrontend.crysnower.cn/tags/banner/"/>
    
      <category term="轮播" scheme="http://snsfrontend.crysnower.cn/tags/%E8%BD%AE%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>java.lang.UnsatisfiedLinkError</title>
    <link href="http://snsfrontend.crysnower.cn/java-lang-UnsatisfiedLinkError.html"/>
    <id>http://snsfrontend.crysnower.cn/java-lang-UnsatisfiedLinkError.html</id>
    <published>2018-05-24T07:19:00.000Z</published>
    <updated>2018-05-24T12:11:51.129Z</updated>
    
    <content type="html"><![CDATA[<p>之前做app的时候引入一个第三方库后，报如下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: dalvik.system.PathClassLoader[DexPathList[[zip file &quot;/data/app/***-7Tf-RsFV6kwvEqK9L5ntUg==/base.apk&quot;],nativeLibraryDirectories=[/data/app/com.suning.snplayer-7Tf-RsFV6kwvEqK9L5ntUg==/lib/arm64, /data/app/com.suning.snplayer-7Tf-RsFV6kwvEqK9L5ntUg==/base.apk!/lib/arm64-v8a, /system/lib64, /system/vendor/lib64]]] couldn&apos;t find &quot;libffmpeg_pptv.so&quot;</span><br></pre></td></tr></table></figure></p><p>分析了一下，原来第三方库依赖有arm64-v8a，armeabi，armeabi-v7a，x86的so库，我的app依赖的libffmpeg_pptv.so只有armeabi版本，所以导致不匹配。<br>解决方法有两个：  </p><ul><li>将app的so库补全</li><li>或整个工程只使用armeabi的so库<br>这里使用第二种办法解决，在build.gradle中添加配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;    </span><br><span class="line">            ndk &#123;</span><br><span class="line">                abiFilters = [&quot;armeabi&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><blockquote><p>NDK SO库的使用者应该遵循一个准则：要么支持所有平台，要么都不支持。</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前做app的时候引入一个第三方库后，报如下错误&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
      <category term="Android" scheme="http://snsfrontend.crysnower.cn/categories/Android/"/>
    
    
      <category term="Error" scheme="http://snsfrontend.crysnower.cn/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>读懂复杂宏的小技巧</title>
    <link href="http://snsfrontend.crysnower.cn/%E8%AF%BB%E6%87%82%E5%A4%8D%E6%9D%82%E5%AE%8F%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7.html"/>
    <id>http://snsfrontend.crysnower.cn/读懂复杂宏的小技巧.html</id>
    <published>2018-05-21T11:13:00.000Z</published>
    <updated>2018-05-24T12:11:51.130Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、什么是宏"><a href="#一、什么是宏" class="headerlink" title="一、什么是宏"></a>一、什么是宏</h4><p>百度百科的解释是：计算机科学里的宏（Macro)，是一种批量处理的称谓。一般说来，宏是一种规则或模式，或称语法替换 ，用于说明某一特定输入（通常是字符串）如何根据预定义的规则转换成对应的输出（通常也是字符串)。这种替换在预编译时进行，称作宏展开。<br>个人简单的理解就是，宏就是你自己定义的一套代码展开的规则，编译器值负责展开，不负责语法的检验。</p><h4 id="二、宏基础"><a href="#二、宏基础" class="headerlink" title="二、宏基础"></a>二、宏基础</h4><h5 id="a、无参宏"><a href="#a、无参宏" class="headerlink" title="a、无参宏"></a>a、无参宏</h5><p>常用来定义常量</p><p>#define PI 3.1415926 </p><h5 id="b、带参宏"><a href="#b、带参宏" class="headerlink" title="b、带参宏"></a>b、带参宏</h5><p>#define MAX(a, b) ((a)&gt;(b) ? (a) : (b))</p><h5 id="d、-操作符"><a href="#d、-操作符" class="headerlink" title="d、#操作符"></a>d、#操作符</h5><p>#：字符串化一个宏参数</p><pre><code>#define STRINFY(arg) #arg</code></pre><p>当arg中包含空格的时候，预处理器只会保留中间一个空格，忽略两端空格</p><h5 id="d、-操作符-1"><a href="#d、-操作符-1" class="headerlink" title="d、\操作符"></a>d、\操作符</h5><p>\是换行符，当宏太长一行写不完时，可以使用其换行。</p><h5 id="d、-操作符-2"><a href="#d、-操作符-2" class="headerlink" title="d、#@操作符"></a>d、#@操作符</h5><p>#@：字符化一个宏参数，即在参数名字前后加上’</p><pre><code>#define CHARIZE(arg) #@arg  </code></pre><h5 id="d、-操作符-3"><a href="#d、-操作符-3" class="headerlink" title="d、##操作符"></a>d、##操作符</h5><p> ##：拼接宏参数和另一个符号，连接两个符号生成一个新的符号</p><pre><code>#define CONS(arg1, arg2) arg1 ## arg2  </code></pre><p>注意：如果#、##操作的参数也是一个宏，那么这个宏将不会被继续展开，但是如果确实需要#、##后的宏继续展开，也可以定义辅助宏过度一下：</p><pre><code>#define CHARIZE_WITH_MACRO(arg) CHARIZE(arg)  #define SYMBOL_CATENATE_WITH_MACRO(arg1, arg2) SYMBOL_CATENATE(arg1, arg2) </code></pre><h4 id="三、技巧"><a href="#三、技巧" class="headerlink" title="三、技巧"></a>三、技巧</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define TO_STR( x ) TO_STR1( x )</span></span><br><span class="line"><span class="meta">#define TO_STR1( x ) #x</span></span><br></pre></td></tr></table></figure><p>RAC中使用了很复杂的宏，直接读很难读懂，TO_STR可以帮助我们来更快地读懂宏<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RAC(<span class="keyword">self</span>,age) = [RACSignal combineLatest:@[RACObserve(<span class="keyword">self</span> , username),RACObserve(<span class="keyword">self</span> , password)] reduce:^(<span class="built_in">NSString</span> *username, <span class="built_in">NSString</span> *password)&#123;</span><br><span class="line">        <span class="keyword">return</span> @(<span class="number">1</span>);</span><br><span class="line">    &#125;];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str = TO_STR(RAC(<span class="keyword">self</span>,age));</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%s"</span>,str);</span><br></pre></td></tr></table></figure></p><ul><li>输出结果<br><img src="/images/dy20180521193332202.jpg" alt="结果"><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[RACSubscriptingAssignmentTrampoline alloc] initWithTarget:(<span class="keyword">self</span>) nilValue:(((<span class="keyword">void</span> *)<span class="number">0</span>))][@(((<span class="keyword">void</span>)(__objc_no &amp;&amp; ((<span class="keyword">void</span>)<span class="keyword">self</span>.age, __objc_no)), <span class="string">"age"</span>))] = [RACSignal combineLatest:@[RACObserve(<span class="keyword">self</span> , username),RACObserve(<span class="keyword">self</span> , password)] reduce:^(<span class="built_in">NSString</span> *username, <span class="built_in">NSString</span> *password)&#123;</span><br><span class="line">        <span class="keyword">return</span> @(<span class="number">1</span>);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure></li></ul><p>我们用输出的代码替代那段宏，程序会有同样的结果<br>看看这结果还是蛮复杂的吧，下次再遇到看不懂宏的就用这个小技巧，保证事半功倍！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、什么是宏&quot;&gt;&lt;a href=&quot;#一、什么是宏&quot; class=&quot;headerlink&quot; title=&quot;一、什么是宏&quot;&gt;&lt;/a&gt;一、什么是宏&lt;/h4&gt;&lt;p&gt;百度百科的解释是：计算机科学里的宏（Macro)，是一种批量处理的称谓。一般说来，宏是一种规则或模式，或称语
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
      <category term="宏" scheme="http://snsfrontend.crysnower.cn/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>UIStackView基础用法介绍</title>
    <link href="http://snsfrontend.crysnower.cn/UIStackView%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%E4%BB%8B%E7%BB%8D.html"/>
    <id>http://snsfrontend.crysnower.cn/UIStackView基础用法介绍.html</id>
    <published>2018-05-21T01:27:19.000Z</published>
    <updated>2018-05-21T06:44:49.678Z</updated>
    
    <content type="html"><![CDATA[<p>介绍</p><p>UIStackView 是 iOS9新增的一个布局技术。熟练掌握相当节省布局时间。<br>UIStackView 是 UIView 的子类，是用来约束子控件的一个控件。但他的作用仅限于此，他不能用来呈现自身的内容，类似于 backgroundColor。当然了，这个控件相当易学，属性只有4个。</p><p><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2016.52.41.png" alt="alt text"></p><p>Axls: 子控件的布局方向，水平或者垂直<br>Alignment: 类似于 UILabel 的 Alignment 属性<br>Distributlon: 子控件的大小<br>Spacing: 子控件间的间距</p><p>可以看到在属性左边有个加号，点开来是这样的：</p><p><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2016.57.50.png" alt="alt text"></p><p>这其实是 UIStackView 也集成了 Size Class，Size Class 是用来布局不同尺寸屏幕的。在这里可以通过选择不同的尺寸来更新子控件约束。</p><p>使用</p><p>接下来我们在 IB 中使用 UIStackView 来完成以下布局：<br><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2017.23.53.png" alt="alt text"><br>首先上面的 ImageView 是直接做约束完成的。<br>然后我们可以选择左下角的三个 Label,然后点击右下角第一个图标合成 UIStackView:</p><p>因为三个 Label 间是有间距的，所以接下来我们修改 Spacing 属性：<br><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2017.29.29.png" alt="alt text"><br>这样就很方便的做好了 UIStackView 内部子视图的布局，然后只需要给 UIStackView 设置离左边和下边的约束即可，因为这个 UIStackView 内部的子视图都是 UILabel, UILabel 都是有他自身的固有大小的，所以不需要设置4个布局。<br><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2017.31.28.png" alt="alt text"><br>这样我们就完成了左边三个 Lable 的布局。接下来我们来布局右边的2个控件。</p><p>还是和刚才一样，选择 Image 和 label，并且组成一个 UIStackView 并设置好 UIStackView 的布局约束：<br><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2017.33.03.png" alt="alt text"><br>接下来布局内部子控件约束：<br><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2017.33.34.png" alt="alt text"><br>做好这两步你会发现 IB 还是报错，这是因为 UIStackView 并不知道他内部的 image 的宽高，这时候我们可以让 image 有他的固有大小：<br><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2017.35.10.png" alt="alt text"><br>将 intrinsic Size 的属性改为 Placeholder，这时候就解决了报错，至此，整个 View 的约束已经做完，是不是发现比之前全部用 Auto Layout 快多了。</p><p>当然了 UIStackView 也是可以用代码创建的。</p><pre><code>class UIStackView : UIView {init(arrangedSubviews views: [UIView]) var arrangedSubviews: [UIView] { get }func addArrangedSubview(view: UIView) func removeArrangedSubview(view: UIView) func insertArrangedSubview(view: UIView, atIndex stackIndex: Int) ... }</code></pre><p>第一个方法是用来创建一个 UIStackView 的，传入 views 里的数组的顺序代表了 UIStackView 里子视图的顺序。<br>第二个方法是用来获得 UIStackView 里有哪些子视图的。</p><p>后面3个方法和 UIView 里的方法是类似的。<br>看到 addArrangedSubview 和 removeArrangedSubview 你是不是想到了addSubView 和removfromSuperView。</p><p>下面有张表，可以区别这四个方法：<br><img src="https://o909w11l5.qnssl.com/2016-07-20-屏幕快照%202016-07-20%2017.44.56.png" alt="alt text"><br>从表中可以看出，添加 UIStackView 的子视图应该用 addArrangedSubview，移除 UIStackView 某个子视图应该用 removeArrangedSubview。</p><p>UIStackView 用来约束子视图的属性有以下几个</p><pre><code>var axis: UILayoutConstraintAxis var distribution: UIStackViewDistribution var alignment: UIStackViewAlignment var spacing: CGFloat var baselineRelativeArrangement: Bool var layoutMarginsRelativeArrangement: Bool</code></pre><p>这些就是使用代码来创建 UIStackView 了。</p><p>UIStackView 还是蛮简单的，但是功能却十分强大。这篇文章应该能让大家了解 UIStackView 的基本使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;介绍&lt;/p&gt;
&lt;p&gt;UIStackView 是 iOS9新增的一个布局技术。熟练掌握相当节省布局时间。&lt;br&gt;UIStackView 是 UIView 的子类，是用来约束子控件的一个控件。但他的作用仅限于此，他不能用来呈现自身的内容，类似于 backgroundColor。
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>URL 编码 iOS</title>
    <link href="http://snsfrontend.crysnower.cn/URL-%E7%BC%96%E7%A0%81-iOS.html"/>
    <id>http://snsfrontend.crysnower.cn/URL-编码-iOS.html</id>
    <published>2018-05-20T07:05:46.000Z</published>
    <updated>2018-05-21T06:27:52.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="URL-编码-iOS"><a href="#URL-编码-iOS" class="headerlink" title="URL 编码 iOS"></a>URL 编码 iOS</h3><p>废弃的方法1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *aa = [@&quot;http://URL...&quot; stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</span><br></pre></td></tr></table></figure><p>废弃的方法2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)encodeParameter:(NSString *)originalPara &#123;</span><br><span class="line">    CFStringRef encodeParaCf = CFURLCreateStringByAddingPercentEscapes(NULL, (__bridge CFStringRef)originalPara, NULL, CFSTR(&quot;!*&apos;();:@&amp;=+$,/?%#[]&quot;), kCFStringEncodingUTF8);</span><br><span class="line">    NSString *encodePara = (__bridge NSString *)(encodeParaCf);</span><br><span class="line">    CFRelease(encodeParaCf);</span><br><span class="line">    return encodePara;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)testURL &#123;</span><br><span class="line">    NSString *charactersToEscape = @&quot;&amp;?=&quot;;</span><br><span class="line">    NSCharacterSet *allowedCharacters = [[NSCharacterSet characterSetWithCharactersInString:charactersToEscape] invertedSet];</span><br><span class="line">    /**</span><br><span class="line">     使用预置的，如果不能满足要求，则使用自定义characterSetWithCharactersInString</span><br><span class="line">    NSCharacterSet *allowedCharacters = [NSCharacterSet URLHostAllowedCharacterSet];</span><br><span class="line">     URLHostAllowedCharacterSet      &quot;#%/&lt;&gt;?@\^`&#123;|&#125;</span><br><span class="line">     URLFragmentAllowedCharacterSet  &quot;#%&lt;&gt;[\]^`&#123;|&#125;</span><br><span class="line">     URLPasswordAllowedCharacterSet  &quot;#%/:&lt;&gt;?@[\]^`&#123;|&#125;</span><br><span class="line">     URLPathAllowedCharacterSet      &quot;#%;&lt;&gt;?[\]^`&#123;|&#125;</span><br><span class="line">     URLQueryAllowedCharacterSet     &quot;#%&lt;&gt;[\]^`&#123;|&#125;</span><br><span class="line">     URLUserAllowedCharacterSet      &quot;#%/:&lt;&gt;?@[\]^`</span><br><span class="line">     **/</span><br><span class="line">    NSString *encodedUrl = [@&quot;htt://baidu.com/a.do?p1=中文&amp;p2=http://baidu.com/a?p11=x&amp;p12=xx&quot; stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacters];</span><br><span class="line">    NSLog(@&quot;%@&quot;, encodedUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps:</p><p>在有些时候，如果业务需要url包含签名之类的参数，大多数情况下请勿对sign等签名字段转码，除非签名验证方也对sign进行解码操作，具体开发过程中还是需要根据交互协议来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;URL-编码-iOS&quot;&gt;&lt;a href=&quot;#URL-编码-iOS&quot; class=&quot;headerlink&quot; title=&quot;URL 编码 iOS&quot;&gt;&lt;/a&gt;URL 编码 iOS&lt;/h3&gt;&lt;p&gt;废弃的方法1：&lt;/p&gt;
&lt;figure class=&quot;highlight p
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
      <category term="基础" scheme="http://snsfrontend.crysnower.cn/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ios修改本地useragent(WKWebView)</title>
    <link href="http://snsfrontend.crysnower.cn/ios%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0useragent-WKWebView.html"/>
    <id>http://snsfrontend.crysnower.cn/ios修改本地useragent-WKWebView.html</id>
    <published>2018-05-20T03:50:39.000Z</published>
    <updated>2018-05-20T04:04:20.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ios修改本地useragent-WKWebView"><a href="#ios修改本地useragent-WKWebView" class="headerlink" title="ios修改本地useragent(WKWebView)"></a>ios修改本地useragent(WKWebView)</h3><p>1、获取原先的userAgent；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* @abstract Evaluates the given JavaScript string.</span><br><span class="line">@param javaScriptString The JavaScript string to evaluate.</span><br><span class="line">@param completionHandler A block to invoke when script evaluation completes or fails.</span><br><span class="line">@discussion The completionHandler is passed the result of the script evaluation or an error.</span><br><span class="line">*/</span><br><span class="line">- (void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^ _Nullable)(_Nullable id, NSError * _Nullable error))completionHandler;</span><br></pre></td></tr></table></figure><p>这个方法也可以用来解决Native调用JS的问题。</p><p>原生js中获取userAgent的方法就是”navigator.userAgent”。</p><p>2、修改userAgent；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*! @abstract The custom user agent string or nil if no custom user agent string has been set.</span><br><span class="line">*/</span><br><span class="line">@property (nullable, nonatomic, copy) NSString *customUserAgent API_AVAILABLE(macosx(10.11), ios(9.0));</span><br></pre></td></tr></table></figure><p>WKWebView 类有个customUserAgent属性，赋值即可。</p><p>3、UIWebView里面userAgent的修改方法；</p><p>由于UIWebView有内存泄露问题，不可控，建议大家也使用WKWebView，替换成本还是很小的。</p><p>4、坑；</p><p>大多数人，包括网上很多帖子都写了关于wkweb修改useragent的方法，例如</p><p><a href="https://www.jianshu.com/p/fd6fe72a3b0e" target="_blank" rel="noopener">https://www.jianshu.com/p/fd6fe72a3b0e</a></p><p><a href="https://www.jianshu.com/p/5f02451b8e87" target="_blank" rel="noopener">https://www.jianshu.com/p/5f02451b8e87</a></p><p>这两篇文章是百度搜索的前几个，都提到了修改不生效，“？？需要alloc两遍？？”，还有人提到“？？第一次进入不生效，第二次就ok了？？”。</p><p>仔细看下来不难发现，WKWebView获取userAgent是个异步block过程，那修改userAgent也是在异步里面完成的，既然修改过程是异步，name使用不得等block回调完成再使用么。</p><p>全量代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  DocumentViewController.m</span><br><span class="line">//  Project_20171206</span><br><span class="line">//</span><br><span class="line">//  Created by StephenZhu on 2018/5/14.</span><br><span class="line">//  Copyright © 2018年 StephenZhu. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;DocumentViewController.h&quot;</span><br><span class="line">#import &lt;WebKit/WebKit.h&gt;</span><br><span class="line">@interface DocumentViewController ()</span><br><span class="line">@property (nonatomic,strong) WKWebView *myWebView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation DocumentViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">[super viewDidLoad];</span><br><span class="line">[self.view addSubview:self.myWebView];</span><br><span class="line">[self layoutMain];</span><br><span class="line">[self setUserAgent];</span><br><span class="line">&#125;</span><br><span class="line">- (void)layoutMain</span><br><span class="line">&#123;</span><br><span class="line">[self.myWebView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">make.edges.mas_equalTo(0);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br><span class="line">- (void)loadUrl</span><br><span class="line">&#123;</span><br><span class="line">NSString* urlStr = [NSString stringWithFormat:@&quot;http://WWW.BAIDU.COM&quot;];</span><br><span class="line">NSURL *url = [NSURL URLWithString:urlStr];</span><br><span class="line">[self.myWebView evaluateJavaScript:@&quot;navigator.userAgent&quot; completionHandler:^(id result, NSError *error) &#123;</span><br><span class="line">NSLog(@&quot;%@&quot;,result);</span><br><span class="line">[self.myWebView loadRequest:[NSURLRequest requestWithURL:url]];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (void)setUserAgent</span><br><span class="line">&#123;</span><br><span class="line">[self.myWebView evaluateJavaScript:@&quot;navigator.userAgent&quot; completionHandler:^(id result, NSError *error) &#123;</span><br><span class="line">NSString *oldUserAgent = result;</span><br><span class="line">NSString *newUserAgent = [NSString stringWithFormat:@&quot;%@ %@&quot;,oldUserAgent,@&quot;TheNewWordForUserAgent/v1.6&quot;];</span><br><span class="line">self.myWebView.customUserAgent = newUserAgent;</span><br><span class="line">[self loadUrl];</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - lazyload</span><br><span class="line">- (WKWebView *)myWebView</span><br><span class="line">&#123;</span><br><span class="line">if (_myWebView == nil) &#123;</span><br><span class="line">_myWebView = [[WKWebView alloc]initWithFrame:CGRectZero];</span><br><span class="line">&#125;</span><br><span class="line">return _myWebView;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ios修改本地useragent-WKWebView&quot;&gt;&lt;a href=&quot;#ios修改本地useragent-WKWebView&quot; class=&quot;headerlink&quot; title=&quot;ios修改本地useragent(WKWebView)&quot;&gt;&lt;/a&gt;ios修改
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
      <category term="WKWebView" scheme="http://snsfrontend.crysnower.cn/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>如何提高字符转float数据时的数据精度</title>
    <link href="http://snsfrontend.crysnower.cn/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E5%AD%97%E7%AC%A6%E8%BD%ACfloat%E6%95%B0%E6%8D%AE%E6%97%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B2%BE%E5%BA%A6.html"/>
    <id>http://snsfrontend.crysnower.cn/如何提高字符转float数据时的数据精度.html</id>
    <published>2018-05-12T09:17:00.000Z</published>
    <updated>2018-05-21T06:31:25.378Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中经常遇到float类型数据转化为NSString再进行显示，但是经常遇到精度出错的问题，如下代码：</p><pre><code>float testF = 123.45;NSString *testStr = [NSString stringWithFormat:@&quot;%.2f&quot;,testF];NSLog(@&quot;testF  %f&quot;,testF);NSLog(@&quot;testStr  %@&quot;,testStr);</code></pre><p>按照一般的逻辑，打印出来的日志应该都是123.45才对，不过用测试工程一看就知道打印出来的是：</p><p>2018-05-12 17:23:34.991681+0800 aabbccdd[9469:258142] testF  123.449997<br>2018-05-12 17:23:34.992835+0800 aabbccdd[9469:258142] testStr  123.45</p><p>还有就是从服务端拿到的NSString转换为Float后数据值不准确。<br>苹果有专门的API：NSDecimalNumber。顾名思义这是一个十进制数字类，继承自NSNumber，苹果针对浮点类型计算精度问题提供出来的计算类，基于十进制的科学计数法来计算，同时可以指定舍入模式，一般用于货币计算。</p><p>NSDecimalNumber是NSNumber的不可变子类。苹果针对浮点型计算时存在精度计算误差的问题而提供的一个计算类,它是基于10进制的定点计算保证了精度不会缺失。同时也可以定制精度的取正类型：向上取正、向下去正、四舍五入等。相对与浮点类型的计算，NSDecimalNumber提供了更加精准的计算。</p><p><img src="http://obfk4z1f6.bkt.clouddn.com/fixed-point-representation.png" alt="Alt text"></p><p>一个定点数包含了：用一个尾数（Mantissa）、一个基数（Base）、一个指数（Exponent）以及一个表示正负的符号(sign).<br>比如 15.99 用十进制科学计数法可以表达为 +1599 × 10⁻² ，其中 1.2345 为尾数，10 为基数，2 为指数。sign为 ‘+’。</p><p>代码表示：</p><p>NSDecimalNumber *price;<br>price = [NSDecimalNumber decimalNumberWithMantissa:1599<br>                                          exponent:-2<br>                                          isNegative:NO];</p><p>price = [NSDecimalNumber decimalNumberWithString:@”15.99”];</p><p>// 或者直接由字符串生成NSDecimalNumber<br>price = [NSDecimalNumber decimalNumberWithString:@”15.99”];</p><p>算式：<br>基本的加减乘除用法如下:</p><p>NSDecimalNumber <em>price1 = [NSDecimalNumber decimalNumberWithString:@”15.99”];<br>NSDecimalNumber </em>price2 = [NSDecimalNumber decimalNumberWithString:@”29.99”];<br>NSDecimalNumber <em>coupon = [NSDecimalNumber decimalNumberWithString:@”5.00”];<br>NSDecimalNumber </em>discount = [NSDecimalNumber decimalNumberWithString:@”.90”];<br>NSDecimalNumber *numProducts = [NSDecimalNumber decimalNumberWithString:@”2.0”];   </p><p>NSDecimalNumber <em>subtotal = [price1 decimalNumberByAdding:price2];<br>NSDecimalNumber </em>afterCoupon = [subtotal decimalNumberBySubtracting:coupon];<br>NSDecimalNumber <em>afterDiscount = [afterCoupon decimalNumberByMultiplyingBy:discount];<br>NSDecimalNumber </em>average = [afterDiscount decimalNumberByDividingBy:numProducts];<br>NSDecimalNumber *averageSquared = [average decimalNumberByRaisingToPower:2];   </p><p>打印数值如下：<br>NSLog(@”Subtotal: %@”, subtotal);                    // 45.98 </p><p>NSLog(@”After coupon: %@”, afterCoupon);            // 40.98</p><p>NSLog((@”After discount: %@”), afterDiscount);       // 36.882</p><p>NSLog(@”Average price per product: %@”, average);    // 18.441</p><p>NSLog(@”Average price squared: %@”, averageSquared); // 340.070481</p><p>取正方式<br>上面的没个算式方法都有个扩充的带behavior参数的方法。通过behavior可以对最后的结果进行取正和保留小数个数的限制。你可以自定义behavior：</p><p>// Rounding policies :<br>// Original<br>//value 1.2  1.21  1.25  1.35  1.27<br>// Plain    1.2  1.2   1.3   1.4   1.3  四舍五入<br>// Down     1.2  1.2   1.2   1.3   1.2  向下取正<br>// Up       1.2  1.3   1.3   1.4   1.3  向上取正<br>// Bankers  1.2  1.2   1.2   1.4   1.3  (特殊的四舍五入，碰到保留位数后一位的数字为5时，根据前一位的奇偶性决定。为偶时向下取正，为奇数时向上取正。如：1.25保留1为小数。5之前是2偶数向下取正1.2；1.35保留1位小数时。5之前为3奇数，向上取正1.4）</p><p>  typedef NS_ENUM(NSUInteger, NSRoundingMode) {</p><pre><code>NSRoundPlain,   // Round up on a tieNSRoundDown,    // Always down == truncateNSRoundUp,      // Always upNSRoundBankers  // on a tie round so last digit is even</code></pre><p>  };   </p><p>//scale：保留有效小数的个数（为0的无效小数后自动过滤).<br>//Exactness：进度异常、Overflow:向上溢出、Underflow：向下溢出、DivideByZero：除数为0。当参数为YES出错会抛出异常，为NO时忽略异常。返回nil.<br>NSDecimalNumberHandler *roundUp = [NSDecimalNumberHandler<br>                                   decimalNumberHandlerWithRoundingMode:NSRoundUp<br>                                   scale:2<br>                                   raiseOnExactness:NO<br>                                   raiseOnOverflow:NO<br>                                   raiseOnUnderflow:NO<br>                                   raiseOnDivideByZero:YES];</p><p>PS:NSDecimalNumber同时提供了isEqualToNumber:方法和NSNumber进行判断是否相等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中经常遇到float类型数据转化为NSString再进行显示，但是经常遇到精度出错的问题，如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float testF = 123.45;
NSString *testStr = [NSString stringWithFormat
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>echarts之用饼图制作带labelline的旭日图(一)</title>
    <link href="http://snsfrontend.crysnower.cn/echarts%E7%94%A8%E9%A5%BC%E5%9B%BE%E5%88%B6%E4%BD%9C%E5%B8%A6labelline%E7%9A%84%E6%97%AD%E6%97%A5%E5%9B%BE.html"/>
    <id>http://snsfrontend.crysnower.cn/echarts用饼图制作带labelline的旭日图.html</id>
    <published>2018-05-12T09:04:00.000Z</published>
    <updated>2018-05-21T06:12:06.547Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果你想要用较少的代码实现比较酷炫的数据统计表，echarts是值得你考虑的一种实现方式。官网提供了很多实例供参考。并且配置项手册很详细，几乎囊括了所有的绘图需求。但是再全的配置，偶尔也会有不满足需求的时候。最近在开发过程中就遇到了一个比较头疼的问题。<br>先看下UI效果<br><img src="/images/dy20180512171652810.jpg" alt="带labelline的日辉图"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>拿到需求，先看echarts的配置手册，很容易想到使用旭日图来做。<br>但是还没等大致效果出来，坑就来了，旭日图的配置项里面没有labelline，也就是没有指向色环的那根线。</p><p>额。。。咋整</p><p>先百度看看吧，找啊找，还是没有解决方案</p><p>没办法，迷茫了好一会，只能在配置手册里瞎看。。。突然，我看到了这张图</p><p><img src="/images/dy20180512175000465.jpg" alt="带labelline的日辉图"></p><p>灵机一动，是不是可以用饼图来做旭日图呢，只需要把外面一圈不需要的数据设置成透明就行了？</p><h3 id="码代码"><a href="#码代码" class="headerlink" title="码代码"></a>码代码</h3><p>服务端给的数据结构是这样的<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"value"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"移动端"</span>,</span><br><span class="line">    <span class="attr">"children"</span>: [&#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">40</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"苹果"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"安卓"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"塞班"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"value"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"PC"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"value"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"平板"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p>我们需要两个data，data0 是内环的数据，这个直接就从数组的第一层获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data0 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; originaldata.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = originaldata[i];<span class="comment">//从服务端给的数组中取出数据</span></span><br><span class="line">    data0.push(&#123;</span><br><span class="line">        value: obj.value,</span><br><span class="line">        name: obj.name,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            color: color0[i]</span><br><span class="line">        &#125;,</span><br><span class="line">        labelLine: &#123;</span><br><span class="line">            length: <span class="number">40</span>,</span><br><span class="line">            length2: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来获取外环的数据 data1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data1 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; originaldata.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = originaldata[i];</span><br><span class="line">    <span class="keyword">var</span> kids = obj.children;</span><br><span class="line">    <span class="comment">//没有子数据，直接加入data1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(kids) === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        data1.push(&#123;</span><br><span class="line">            value: obj.value,</span><br><span class="line">            name: obj.name,</span><br><span class="line">            <span class="comment">//没有子数据，将其设置为透明</span></span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">                color: <span class="string">'transparent'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; kids.length; k++) &#123;</span><br><span class="line">            <span class="keyword">var</span> kid = kids[k];</span><br><span class="line">            data1.push(&#123;</span><br><span class="line">                value: kid.value,</span><br><span class="line">                name: kid.name,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                    color: color1[k]</span><br><span class="line">                &#125;,</span><br><span class="line">                label: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        position: <span class="string">'outside'</span>,</span><br><span class="line">                        formatter: <span class="string">'&#123;b&#125; &#123;d&#125;% '</span>,</span><br><span class="line">                        color: <span class="string">'#909090'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后在option中设置data0 和 data1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#161823'</span>,</span><br><span class="line">    series: [&#123;</span><br><span class="line">            name: <span class="string">'访问来源'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,<span class="comment">//饼图</span></span><br><span class="line">            animation: <span class="literal">false</span>,</span><br><span class="line">            radius: [<span class="string">'47%'</span>, <span class="string">'74%'</span>],<span class="comment">//内环尺寸</span></span><br><span class="line">            label: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    position: <span class="string">'outside'</span>,</span><br><span class="line">                    formatter: <span class="string">'&#123;b&#125; &#123;d&#125;% '</span>,</span><br><span class="line">                    color: <span class="string">'#fff'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            labelLine: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    show: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            data: data0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'访问来源'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,</span><br><span class="line">            radius: [<span class="string">'74%'</span>, <span class="string">'84%'</span>],<span class="comment">//外环尺寸</span></span><br><span class="line">            animation: <span class="literal">false</span>,</span><br><span class="line">            data: data1</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="预览地址"><a href="#预览地址" class="headerlink" title="预览地址"></a>预览地址</h3><p><a href="http://gallery.echartsjs.com/editor.html?c=xBJmySVERf&amp;v=1" target="_blank" rel="noopener">http://gallery.echartsjs.com/editor.html?c=xBJmySVERf&amp;v=1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;如果你想要用较少的代码实现比较酷炫的数据统计表，echarts是值得你考虑的一种实现方式。官网提供了很多实例供参考。并且配置项手册很详细，几
      
    
    </summary>
    
      <category term="WEB" scheme="http://snsfrontend.crysnower.cn/categories/WEB/"/>
    
    
      <category term="echarts" scheme="http://snsfrontend.crysnower.cn/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Android : 监听app后台切换到前台</title>
    <link href="http://snsfrontend.crysnower.cn/%E7%9B%91%E5%90%ACapp%E5%90%8E%E5%8F%B0%E5%88%87%E6%8D%A2%E5%88%B0%E5%89%8D%E5%8F%B0.html"/>
    <id>http://snsfrontend.crysnower.cn/监听app后台切换到前台.html</id>
    <published>2018-05-12T08:46:00.000Z</published>
    <updated>2018-05-20T07:11:48.559Z</updated>
    
    <content type="html"><![CDATA[<p>App后台切换前台可以通过ActivityLifecycleCallbacks方法来实现，ActivityLifecycleCallbacks可以用来监听app中所有Activity的声明周期<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public void unRegister(Application application)&#123;</span><br><span class="line">     application.unregisterActivityLifecycleCallbacks(activityLifecycleCallbacks);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> private Application.ActivityLifecycleCallbacks activityLifecycleCallbacks = new Application.ActivityLifecycleCallbacks() &#123;</span><br><span class="line">     //打开的Activity数量统计</span><br><span class="line">     private int activityStartCount = 0;</span><br><span class="line">     </span><br><span class="line">     @Override</span><br><span class="line">     public void onActivityStarted(Activity activity) &#123;</span><br><span class="line">         activityStartCount++;</span><br><span class="line">         //数值从0变到1说明是从后台切到前台</span><br><span class="line">         if (activityStartCount == 1)&#123;</span><br><span class="line">             //从后台切到前台</span><br><span class="line">             if(mOnAppStatusListener != null)&#123;</span><br><span class="line">                 mOnAppStatusListener.onFront();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void onActivityStopped(Activity activity) &#123;</span><br><span class="line">         activityStartCount--;</span><br><span class="line">         //数值从1到0说明是从前台切到后台</span><br><span class="line">         if (activityStartCount == 0)&#123;</span><br><span class="line">             //从前台切到后台</span><br><span class="line">             if(mOnAppStatusListener != null)&#123;</span><br><span class="line">                 mOnAppStatusListener.onBack();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;App后台切换前台可以通过ActivityLifecycleCallbacks方法来实现，ActivityLifecycleCallbacks可以用来监听app中所有Activity的声明周期&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Android" scheme="http://snsfrontend.crysnower.cn/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>计算一年中所有周的第一天和最后一天</title>
    <link href="http://snsfrontend.crysnower.cn/%E8%AE%A1%E7%AE%97%E4%B8%80%E5%B9%B4%E4%B8%AD%E6%89%80%E6%9C%89%E5%91%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9.html"/>
    <id>http://snsfrontend.crysnower.cn/计算一年中所有周的第一天和最后一天.html</id>
    <published>2018-05-07T11:34:00.000Z</published>
    <updated>2018-05-24T12:19:33.378Z</updated>
    
    <content type="html"><![CDATA[<p>准备</p><p>在看代码之前你可能需要先了解以下知识</p><ul><li><p><a href="https://www.jianshu.com/p/d0e56b09179a" target="_blank" rel="noopener">NSDate、NSCalendar和NSDateComponents</a></p></li><li><p><a href="https://blog.csdn.net/awaylin113/article/details/39557969" target="_blank" rel="noopener">NSCalendar使用详解</a></p></li></ul><p>代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - (<span class="keyword">void</span>)weeksWithDateComponents:(<span class="built_in">NSDateComponents</span> *)fromComp</span><br><span class="line">              toDateComponents:(<span class="built_in">NSDateComponents</span> *)toComp&#123;</span><br><span class="line">    <span class="comment">//获取公历日历</span></span><br><span class="line">    <span class="built_in">NSCalendar</span> *calendar = [<span class="built_in">NSCalendar</span> calendarWithIdentifier:<span class="built_in">NSCalendarIdentifierGregorian</span>];</span><br><span class="line">    <span class="comment">//一年中的天数或一年已过的天数</span></span><br><span class="line">    <span class="built_in">NSInteger</span> daysOfYear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (toComp) &#123;<span class="comment">//计算已过的天数</span></span><br><span class="line">        daysOfYear = [calendar ordinalityOfUnit:<span class="built_in">NSCalendarUnitDay</span> inUnit:<span class="built_in">NSCalendarUnitYear</span> forDate:[calendar dateFromComponents:toComp]];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//计算一年的天数</span></span><br><span class="line"><span class="comment">//        daysOfYear = [calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitYear forDate:[calendar dateFromComponents:fromComp]].length;//在9.3系统里始终是31天</span></span><br><span class="line">        <span class="comment">/*fixed 9.3 bug*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">            fromComp.month = i;</span><br><span class="line">            fromComp.day = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">NSDate</span> *date = [calendar dateFromComponents:fromComp];</span><br><span class="line">            daysOfYear += [calendar rangeOfUnit:<span class="built_in">NSCalendarUnitDay</span> inUnit:<span class="built_in">NSCalendarUnitMonth</span> forDate:date].length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//月份移动至1月</span></span><br><span class="line">    fromComp.month = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//记录当前第几周</span></span><br><span class="line">    <span class="built_in">NSInteger</span> weekOfYear = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历每一天</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">1</span>; i &lt;= daysOfYear; i++) &#123;</span><br><span class="line">        <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">            <span class="comment">//移至当前天</span></span><br><span class="line">            fromComp.day = i;</span><br><span class="line">            <span class="built_in">NSDate</span> *idate = [calendar dateFromComponents:fromComp];</span><br><span class="line">            <span class="built_in">NSDateComponents</span> *comp = [calendar components:kCFCalendarUnitDay|kCFCalendarUnitWeekday|kCFCalendarUnitMonth fromDate:idate];</span><br><span class="line">            <span class="comment">//星期一开始算周</span></span><br><span class="line">            <span class="keyword">if</span> (comp.weekday == <span class="number">2</span>) &#123;</span><br><span class="line">                weekOfYear += <span class="number">1</span>;</span><br><span class="line">                fromComp.day = MIN(i+<span class="number">6</span>,daysOfYear);</span><br><span class="line">                <span class="built_in">NSDate</span> *fdate = [calendar dateFromComponents:fromComp];</span><br><span class="line">                <span class="built_in">NSString</span> *reslut = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"第%zd周 (%zd月%zd日-%zd月%zd日)"</span>,weekOfYear,</span><br><span class="line">                                    [calendar ordinalityOfUnit:<span class="built_in">NSCalendarUnitMonth</span> inUnit:<span class="built_in">NSCalendarUnitYear</span> forDate:fdate],</span><br><span class="line">                                    [calendar ordinalityOfUnit:<span class="built_in">NSCalendarUnitDay</span> inUnit:<span class="built_in">NSCalendarUnitMonth</span> forDate:fdate],</span><br><span class="line">                                    [calendar ordinalityOfUnit:<span class="built_in">NSCalendarUnitMonth</span> inUnit:<span class="built_in">NSCalendarUnitYear</span> forDate:idate],</span><br><span class="line">                                    [calendar ordinalityOfUnit:<span class="built_in">NSCalendarUnitDay</span> inUnit:<span class="built_in">NSCalendarUnitMonth</span> forDate:idate]];</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,reslut);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSDateComponents</span> * fComp = [[<span class="built_in">NSCalendar</span> currentCalendar] components:<span class="built_in">NSCalendarUnitYear</span>|<span class="built_in">NSCalendarUnitMonth</span>|<span class="built_in">NSCalendarUnitDay</span> fromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line">fComp.month = <span class="number">1</span>;</span><br><span class="line">fComp.day = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">NSDateComponents</span> * tComp = [[<span class="built_in">NSCalendar</span> currentCalendar] components:<span class="built_in">NSCalendarUnitYear</span>|<span class="built_in">NSCalendarUnitMonth</span>|<span class="built_in">NSCalendarUnitDay</span> fromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line">[<span class="keyword">self</span> weeksWithDateComponents:fComp toDateComponents:tComp];</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;准备&lt;/p&gt;
&lt;p&gt;在看代码之前你可能需要先了解以下知识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d0e56b09179a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NSDate、NSCal
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
      <category term="日历" scheme="http://snsfrontend.crysnower.cn/tags/%E6%97%A5%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>关于Masonry的使用和注意点</title>
    <link href="http://snsfrontend.crysnower.cn/%E5%85%B3%E4%BA%8EMasonry%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%B3%A8%E6%84%8F%E7%82%B9.html"/>
    <id>http://snsfrontend.crysnower.cn/关于Masonry的使用和注意点.html</id>
    <published>2018-05-07T02:24:40.000Z</published>
    <updated>2018-05-21T06:30:26.961Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前开发时都是在xib文件中添加约束，或者代码中计算frame并没有接触过Masonry，现在写篇博客来归纳总结下Masonry的使用和注意点。这篇文章只是简单介绍Masonry，以及Masonry的使用，并且会举一些例子出来。但并不会涉及到Masonry的内部实现</p><p>Masonry中的坑：</p><p>在使用Masonry进行约束时，有一些是需要注意的。</p><p>在使用Masonry添加约束之前，需要在addSubview之后才能使用，否则会导致崩溃。<br>在添加约束时初学者经常会出现一些错误，约束出现问题的原因一般就是两种：约束冲突和缺少约束。对于这两种问题，可以通过调试和log排查。<br>之前使用Interface Builder添加约束，如果约束有错误直接就可以看出来，并且会以红色或者黄色警告体现出来。而Masonry则不会直观的体现出来，而是以运行过程中崩溃或者打印异常log体现，所以这也是手写代码进行AutoLayout的一个缺点。<br>这个问题只能通过多敲代码，积攒纯代码进行AutoLayout的经验，慢慢就用起来越来越得心应手了。</p><p>Masonry基础使用</p><p>Masonry基础API<br>mas_makeConstraints()    添加约束.<br>mas_remakeConstraints()  移除之前的约束，重新添加新的约束.<br>mas_updateConstraints()  更新约束</p><p>equalTo()       参数是对象类型，一般是视图对象或者mas_width这样的坐标系对象</p><p>mas_equalTo()   和上面功能相同，参数可以传递基础数据类型对象，可以理解为比上面的API更强大</p><p>width()         用来表示宽度，例如代表view的宽度</p><p>mas_width()     用来获取宽度的值。和上面的区别在于，一个代表某个坐标系对象，一个用来获取坐标系对象的值<br>Auto Boxing</p><p>上面例如equalTo或者width这样的，有时候需要涉及到使用mas_前缀，这在开发中需要注意作区分。</p><p>如果在当前类引入#import “Masonry.h”之前，用下面两种宏定义声明一下，就不需要区分mas_前缀。</p><p>// 定义这个常量，就可以不用在开发过程中使用”mas_”前缀。</p><p>#define MAS_SHORTHAND<br>// 定义这个常量，就可以让Masonry帮我们自动把基础数据类型的数据，自动装箱为对象类型。</p><p>#define MAS_SHORTHAND_GLOBALS<br>修饰语句</p><p>Masonry为了让代码使用和阅读更容易理解，所以直接通过点语法就可以调用，还添加了and和with两个方法。这两个方法内部实际上什么都没干，只是在内部将self直接返回，功能就是为了更加方便阅读，对代码执行没有实际作用。</p><p>例如下面的例子：</p><p>make.top.and.bottom.equalTo(self.containerView).with.offset(padding);<br>其内部代码实现，实际上就是直接将self返回。</p><ul><li>(MASConstraint *)with {<br>  return self;<br>}<br>更新约束和布局</li></ul><p>关于更新约束布局相关的API，主要用以下四个API：</p><ul><li>(void)updateConstraintsIfNeeded  调用此方法，如果有标记为需要重新布局的约束，则立即进行重新布局，内部会调用updateConstraints方法</li><li>(void)updateConstraints          重写此方法，内部实现自定义布局过程</li><li>(BOOL)needsUpdateConstraints     当前是否需要重新布局，内部会判断当前有没有被标记的约束</li><li>(void)setNeedsUpdateConstraints  标记需要进行重新布局<br>关于UIView重新布局相关的API，主要用以下三个API：</li></ul><ul><li>(void)setNeedsLayout  标记为需要重新布局</li><li>(void)layoutIfNeeded  查看当前视图是否被标记需要重新布局，有则在内部调用layoutSubviews方法进行重新布局</li><li>(void)layoutSubviews  重写当前方法，在内部完成重新布局操作<br>Masonry示例代码</li></ul><p>Masonry本质上就是对系统AutoLayout进行的封装，包括里面很多的API，都是对系统API进行了一次二次包装。</p><p>typedef NS_OPTIONS(NSInteger, MASAttribute) {</p><pre><code>MASAttributeLeft = 1 &lt;&lt; NSLayoutAttributeLeft,    MASAttributeRight = 1 &lt;&lt; NSLayoutAttributeRight,  MASAttributeTop = 1 &lt;&lt; NSLayoutAttributeTop,   MASAttributeBottom = 1 &lt;&lt; NSLayoutAttributeBottom,  MASAttributeLeading = 1 &lt;&lt; NSLayoutAttributeLeading,  MASAttributeTrailing = 1 &lt;&lt; NSLayoutAttributeTrailing,  MASAttributeWidth = 1 &lt;&lt; NSLayoutAttributeWidth,  MASAttributeHeight = 1 &lt;&lt; NSLayoutAttributeHeight,  MASAttributeCenterX = 1 &lt;&lt; NSLayoutAttributeCenterX,  MASAttributeCenterY = 1 &lt;&lt; NSLayoutAttributeCenterY,  MASAttributeBaseline = 1 &lt;&lt; NSLayoutAttributeBaseline,  </code></pre><p>};<br>常用方法</p><p>设置内边距</p><p>/**<br> 设置yellow视图和self.view等大，并且有10的内边距。<br> 注意根据UIView的坐标系，下面right和bottom进行了取反。所以不能写成下面这样，否则right、bottom这两个方向会出现问题。<br> make.edges.equalTo(self.view).with.offset(10);</p><p> 除了下面例子中的offset()方法，还有针对不同坐标系的centerOffset()、sizeOffset()、valueOffset()之类的方法。<br> <em>/<br>[self.yellowView mas_makeConstraints:^(MASConstraintMaker </em>make) {<br>    make.left.equalTo(self.view).with.offset(10);<br>    make.top.equalTo(self.view).with.offset(10);<br>    make.right.equalTo(self.view).with.offset(-10);<br>    make.bottom.equalTo(self.view).with.offset(-10);<br>}];<br>通过insets简化设置内边距的方式</p><p>// 下面的方法和上面例子等价，区别在于使用insets()方法。<br>[self.blueView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    // 下、右不需要写负号，insets方法中已经为我们做了取反的操作了。<br>    make.edges.equalTo(self.view).with.insets(UIEdgeInsetsMake(10, 10, 10, 10));<br>}];<br>更新约束</p><p>// 设置greenView的center和size，这样就可以达到简单进行约束的目的<br>[self.greenView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.center.equalTo(self.view);<br>    // 这里通过mas_equalTo给size设置了基础数据类型的参数，参数为CGSize的结构体<br>    make.size.mas_equalTo(CGSizeMake(300, 300));<br>}];</p><p>// 为了更清楚的看出约束变化的效果，在显示两秒后更新约束。<br>dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.f <em> NSEC_PER_SEC)), dispatch_get_main_queue(), ^{<br>    [self.greenView mas_updateConstraints:^(MASConstraintMaker </em>make) {<br>        make.centerX.equalTo(self.view).offset(100);<br>        make.size.mas_equalTo(CGSizeMake(100, 100));<br>    }];<br>});<br>大于等于和小于等于某个值的约束</p><p>[self.textLabel mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.center.equalTo(self.view);<br>    // 设置宽度小于等于200<br>    make.width.lessThanOrEqualTo(@200);<br>    // 设置高度大于等于10<br>    make.height.greaterThanOrEqualTo(@(10));<br>}];<br>self.textLabel.text = @”这是测试的字符串。能看到1、2、3个步骤，第一步当然是上传照片了，要上传正面近照哦。上传后，网站会自动识别你的面部，如果觉得识别的不准，你还可以手动修改一下。左边可以看到16项修改参数，最上面是整体修改，你也可以根据自己的意愿单独修改某项，将鼠标放到选项上面，右边的预览图会显示相应的位置。”;</p><p>textLabel只需要设置一个属性即可</p><p>self.textLabel.numberOfLines = 0;<br>使用基础数据类型当做参数</p><p>/**<br> 如果想使用基础数据类型当做参数，Masonry为我们提供了”mas_xx”格式的宏定义。<br> 这些宏定义会将传入的基础数据类型转换为NSNumber类型，这个过程叫做封箱(Auto Boxing)。</p><p> “mas_xx”开头的宏定义，内部都是通过MASBoxValue()函数实现的。<br> 这样的宏定义主要有四个，分别是mas_equalTo()、mas_offset()和大于等于、小于等于四个。<br> <em>/<br>[self.redView mas_makeConstraints:^(MASConstraintMaker </em>make) {<br>    make.center.equalTo(self.view);<br>    make.width.mas_equalTo(100);<br>    make.height.mas_equalTo(100);<br>}];<br>设置约束优先级</p><p>/*<em><br> Masonry为我们提供了三个默认的方法，priorityLow()、priorityMedium()、priorityHigh()，这三个方法内部对应着不同的默认优先级。<br> 除了这三个方法，我们也可以自己设置优先级的值，可以通过priority()方法来设置。 </em>/<br>[self.redView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.center.equalTo(self.view);<br>    make.width.equalTo(self.view).priorityLow();<br>    make.width.mas_equalTo(20).priorityHigh();<br>    make.height.equalTo(self.view).priority(200);<br>    make.height.mas_equalTo(100).priority(1000);<br>}];</p><p>Masonry也帮我们定义好了一些默认的优先级常量，分别对应着不同的数值，优先级最大数值是1000。<br>static const MASLayoutPriority MASLayoutPriorityRequired = UILayoutPriorityRequired;<br>static const MASLayoutPriority MASLayoutPriorityDefaultHigh = UILayoutPriorityDefaultHigh;<br>static const MASLayoutPriority MASLayoutPriorityDefaultMedium = 500;<br>static const MASLayoutPriority MASLayoutPriorityDefaultLow = UILayoutPriorityDefaultLow;<br>static const MASLayoutPriority MASLayoutPriorityFittingSizeLevel = UILayoutPriorityFittingSizeLevel;<br>设置约束比例</p><p>// 设置当前约束值乘以多少，例如这个例子是redView的宽度是self.view宽度的0.2倍。<br>[self.redView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.center.equalTo(self.view);<br>    make.height.mas_equalTo(30);<br>    make.width.equalTo(self.view).multipliedBy(0.2);<br>}];<br>小练习</p><p>子视图等高练习</p><p>/**<br> 下面的例子是通过给equalTo()方法传入一个数组，设置数组中子视图及当前make对应的视图之间等高。</p><p> 需要注意的是，下面block中设置边距的时候，应该用insets来设置，而不是用offset。<br> 因为用offset设置right和bottom的边距时，这两个值应该是负数，所以如果通过offset来统一设置值会有问题。<br> <em>/<br>CGFloat padding = LXZViewPadding;<br>[self.redView mas_makeConstraints:^(MASConstraintMaker </em>make) {<br>    make.left.right.top.equalTo(self.view).insets(UIEdgeInsetsMake(padding, padding, 0, padding));<br>    make.bottom.equalTo(self.blueView.mas_top).offset(-padding);<br>}];</p><p>[self.blueView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.left.right.equalTo(self.view).insets(UIEdgeInsetsMake(0, padding, 0, padding));<br>    make.bottom.equalTo(self.yellowView.mas_top).offset(-padding);<br>}];</p><p>/*<em><br> 下面设置make.height的数组是关键，通过这个数组可以设置这三个视图高度相等。其他例如宽度之类的，也是类似的方式。 </em>/<br>[self.yellowView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.left.right.bottom.equalTo(self.view).insets(UIEdgeInsetsMake(0, padding, padding, padding));<br>    make.height.equalTo(@[self.blueView, self.redView]);<br>}];<br>子视图垂直居中练习</p><p>/*<em><br> 要求：(这个例子是在其他人博客里看到的，然后按照要求自己写了下面这段代码)<br> 两个视图相对于父视图垂直居中，并且两个视图以及父视图之间的边距均为10，高度为150，两个视图宽度相等。 </em>/<br>CGFloat padding = 10.f;<br>[self.blueView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.centerY.equalTo(self.view);<br>    make.left.equalTo(self.view).mas_offset(padding);<br>    make.right.equalTo(self.redView.mas_left).mas_offset(-padding);<br>    make.width.equalTo(self.redView);<br>    make.height.mas_equalTo(150);<br>}];</p><p>[self.redView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.centerY.equalTo(self.view);<br>    make.right.equalTo(self.view).mas_offset(-padding);<br>    make.width.equalTo(self.blueView);<br>    make.height.mas_equalTo(150);<br>}];<br>UITableView动态Cell高度</p><p>在iOS UI开发过程中，UITableView的动态Cell高度一直都是个问题。实现这样的需求，实现方式有很多种，只是实现起来复杂程度和性能的区别。</p><p>在不考虑性能的情况下，tableView动态Cell高度，可以采取估算高度的方式。如果通过估算高度的方式实现的话，无论是纯代码还是Interface Builder，都只需要两行代码就可以完成Cell自动高度适配。</p><p>实现方式：</p><p>需要设置tableView的rowHeight属性，这里设置为自动高度，告诉系统Cell的高度是不固定的，需要系统帮我们进行计算。然后设置tableView的estimatedRowHeight属性，设置一个估计的高度。(我这里用的代理方法，实际上都一样)</p><p>原理：</p><p>这样的话，在tableView被创建之后，系统会根据estimatedRowHeight属性设置的值，为tableView设置一个估计的值。然后在Cell显示的时候再获取Cell的高度，并刷新tableView的contentSize。</p><ul><li><p>(void)tableViewConstraints {<br>  [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) {</p><pre><code>make.edges.equalTo(self.view);</code></pre><p>  }];<br>}</p></li><li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {<br>  return self.dataList.count;<br>}</p></li><li><p>(MasonryTableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath {<br>  MasonryTableViewCell </em>cell = [tableView dequeueReusableCellWithIdentifier:LXZTableViewCellIdentifier];<br>  [cell reloadViewWithText:self.dataList[indexPath.row]];<br>  return cell;<br>}</p></li></ul><p>// 需要注意的是，这个代理方法和直接返回当前Cell高度的代理方法并不一样。<br>// 这个代理方法会将当前所有Cell的高度都预估出来，而不是只计算显示的Cell，所以这种方式对性能消耗还是很大的。<br>// 所以通过设置estimatedRowHeight属性的方式，和这种代理方法的方式，最后性能消耗都是一样的。</p><ul><li><p>(CGFloat)tableView:(UITableView <em>)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath </em>)indexPath {<br>  return 50.f;<br>}</p></li><li><p>(UITableView *)tableView {<br>  if (!_tableView) {</p><pre><code>_tableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStylePlain];_tableView.delegate = self;_tableView.dataSource = self;// 设置tableView自动高度_tableView.rowHeight = UITableViewAutomaticDimension;[_tableView registerClass:[MasonryTableViewCell class] forCellReuseIdentifier:LXZTableViewCellIdentifier];[self.view addSubview:_tableView];</code></pre><p>  }<br>  return _tableView;<br>}<br>UIScrollView自动布局</p></li></ul><p>之前听很多人说过UIScrollView很麻烦，然而我并没有感觉到有多麻烦(并非装逼)。我感觉说麻烦的人可能根本就没试过吧，只是觉得很麻烦而已。</p><p>我这里就讲一下两种进行UIScrollView自动布局的方案，并且会讲一下自动布局的技巧，只要掌握技巧，布局其实很简单。</p><p>布局小技巧：</p><p>给UIScrollView添加的约束是定义其frame，设置contentSize是定义其内部大小。UIScrollView进行addSubview操作，都是将其子视图添加到contentView上。</p><p>所以，添加到UIScrollView上的子视图，对UIScrollView添加的约束都是作用于contentView上的。只需要按照这样的思路给UIScrollView设置约束，就可以掌握设置约束的技巧了。</p><p>提前设置contentSize</p><p>// 提前设置好UIScrollView的contentSize，并设置UIScrollView自身的约束<br>self.scrollView.contentSize = CGSizeMake(1000, 1000);<br>[self.scrollView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.edges.equalTo(self.view);<br>}];</p><p>// 虽然redView的get方法内部已经执行过addSubview操作，但是UIView始终以最后一次添加的父视图为准，也就是redView始终是在最后一次添加的父视图上。<br>[self.scrollView addSubview:self.redView];<br>[self.redView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.left.top.equalTo(self.scrollView);<br>    make.width.height.mas_equalTo(200);<br>}];</p><p>[self.scrollView addSubview:self.blueView];<br>[self.blueView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.left.equalTo(self.redView.mas_right);<br>    make.top.equalTo(self.scrollView);<br>    make.width.height.equalTo(self.redView);<br>}];</p><p>[self.scrollView addSubview:self.greenView];<br>[self.greenView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.left.equalTo(self.scrollView);<br>    make.top.equalTo(self.redView.mas_bottom);<br>    make.width.height.equalTo(self.redView);<br>}];<br>自动contentSize</p><p>上面的例子是提前设置好UIScrollView的contentSize的内部size，然后直接向里面addSubview。但是这有个要求就是，需要提前知道contentSize的大小，不然没法设置。</p><p>这个例子中将会展示动态改变contentSize的大小，内部视图有多少contentSize就自动扩充到多大。</p><p>这种方式的实现，主要是依赖于创建一个containerView内容视图，并添加到UIScrollView上作为子视图。UIScrollView原来的子视图都添加到containerView上，并且和这个视图设置约束。</p><p>因为对UIScrollView进行addSubview操作的时候，本质上是往其contentView上添加。也就是containerView的父视图是contentView，通过containerView撑起contentView视图的大小，以此来实现动态改变contentSize。</p><p>// 在进行约束的时候，要对containerView的上下左右都添加和子视图的约束，以便确认containerView的边界区域。<br>[self.scrollView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.edges.equalTo(self.view);<br>}];</p><p>CGFloat padding = LXZViewPadding;<br>[self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.edges.equalTo(self.scrollView).insets(UIEdgeInsetsMake(padding, padding, padding, padding));<br>}];</p><p>[self.containerView addSubview:self.greenView];<br>[self.greenView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.top.left.equalTo(self.containerView).offset(padding);<br>    make.size.mas_equalTo(CGSizeMake(250, 250));<br>}];</p><p>[self.containerView addSubview:self.redView];<br>[self.redView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.top.equalTo(self.containerView).offset(padding);<br>    make.left.equalTo(self.greenView.mas_right).offset(padding);<br>    make.size.equalTo(self.greenView);<br>    make.right.equalTo(self.containerView).offset(-padding);<br>}];</p><p>[self.containerView addSubview:self.yellowView];<br>[self.yellowView mas_makeConstraints:^(MASConstraintMaker *make) {<br>    make.left.equalTo(self.containerView).offset(padding);<br>    make.top.equalTo(self.greenView.mas_bottom).offset(padding);<br>    make.size.equalTo(self.greenView);<br>    make.bottom.equalTo(self.containerView).offset(-padding);<br>}];</p><p>多个（2个以上）控件的等间隔排序显示<br>首先介绍2个函数<br>/** </p><pre><code>*  axisType         轴线方向 *  fixedSpacing     间隔大小 *  fixedItemLength  每个控件的固定长度/宽度 *  leadSpacing      头部间隔 *  tailSpacing      尾部间隔 * */  </code></pre><p>//1. 等间隔排列 - 多个控件间隔固定，控件长度/宽度变化  </p><ul><li>(void)mas_distributeViewsAlongAxis:(MASAxisType)axisType<br>withFixedSpacing:(CGFloat)fixedSpacing leadSpacing:(CGFloat)leadSpacing<br>tailSpacing:(CGFloat)tailSpacing;  </li></ul><p>//2. 等间隔排列 - 多个固定大小固定，间隔空隙变化  </p><ul><li>(void)mas_distributeViewsAlongAxis:(MASAxisType)axisType<br>withFixedItemLength:(CGFloat)fixedItemLength<br>leadSpacing:(CGFloat)leadSpacing<br>tailSpacing:(CGFloat)tailSpacing;  </li></ul><p>//首先添加5个视图<br> NSMutableArray <em>array = [NSMutableArray new];<br>    for (int i = 0; i &lt; 5; i ++) {<br>        UIView </em>view = [UIView new];<br>        view.backgroundColor = [UIColor greenColor];<br>        [self addSubview:view];<br>        [array addObject:view]; //保存添加的控件<br>    }  </p><p>//水平方向控件间隔固定等间隔<br>[array mas_distributeViewsAlongAxis:MASAxisTypeHorizontal withFixedSpacing:15 leadSpacing:10 tailSpacing:10];<br>            [array makeConstraints:^(MASConstraintMaker *make) {<br>                make.top.equalTo(50);<br>                make.height.equalTo(70);<br>            }];  </p><p>//水平方向宽度固定等间隔<br>[array mas_distributeViewsAlongAxis:MASAxisTypeHorizontal withFixedItemLength:70 leadSpacing:10 tailSpacing:10];<br>            [array makeConstraints:^(MASConstraintMaker *make) { //数组额你不必须都是view<br>                make.top.equalTo(50);<br>                make.height.equalTo(70);<br>            }];  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为之前开发时都是在xib文件中添加约束，或者代码中计算frame并没有接触过Masonry，现在写篇博客来归纳总结下Masonry的使用和注意点。这篇文章只是简单介绍Masonry，以及Masonry的使用，并且会举一些例子出来。但并不会涉及到Masonry的内部实现&lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>在MKMapView中添加渐变色路径</title>
    <link href="http://snsfrontend.crysnower.cn/%E5%9C%A8MKMapView%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%B8%90%E5%8F%98%E8%89%B2%E8%B7%AF%E5%BE%84.html"/>
    <id>http://snsfrontend.crysnower.cn/在MKMapView中添加渐变色路径.html</id>
    <published>2018-04-28T09:50:37.000Z</published>
    <updated>2018-04-28T10:16:53.129Z</updated>
    
    <content type="html"><![CDATA[<p>刚来苏宁接触到的业务并不多，既然要写博客那就暂时上一篇之前所遇到的关于在地图控件中如何添加渐变色路径实现方案吧。</p><p>整体实现原理是依据用户跑步配速将坐标点等分为若干色块，将色块相连就形成了渐变色轨迹</p><p>如何在iPhone上绘制mapView就不说了，在mapView上绘制轨迹要添加MKPolyline，调用[self.mapView addOverlay:self.polyLine]；但这个MKPolyline的构造方法中只接受和坐标相关的值，而轨迹渐变自然要通过速度控制，但传不进去，所以只能重写一个实现<mkoverlay>协议的类。下面就是我找到的，拿去可以直接用：</mkoverlay></p><p>GradientPolylineOverlay.h实现</p><p>#import &lt;Foundation/Foundation.h&gt;</p><p>#import &lt;MapKit/MapKit.h&gt;</p><p>@interface GradientPolylineOverlay : NSObject <mkoverlay>{<br>    MKMapPoint *points;<br>    NSUInteger pointCount;<br>    NSUInteger pointSpace;</mkoverlay></p><pre><code>MKMapRect boundingMapRect;pthread_rwlock_t rwLock;</code></pre><p>}</p><p>//Initialize the overlay with the starting coordinate.<br>//The overlay’s boundingMapRect will be set to a sufficiently large square<br>//centered on the starting coordinate.<br>-(id) initWithCenterCoordinate:(CLLocationCoordinate2D)coord;</p><p>-(id) initWithPoints:(CLLocationCoordinate2D<em>)_points velocity:(float</em>)_velocity count:(NSUInteger)_count;</p><p>//Add a location observation. A MKMapRect containing the newly added point<br>//and the previously added point is returned so that the view can be updated<br>//int that rectangle. If the added coordinate has not moved far enough from<br>//the previously added coordinate it will not be added to the list and<br>//MKMapRectNULL will be returned.<br>//<br>-(MKMapRect)addCoordinate:(CLLocationCoordinate2D)coord;</p><p>-(void) lockForReading;</p><p>//The following properties must only be accessed when holding the read lock<br>// via lockForReading. Once you’re done accessing the points, release the<br>// read lock with unlockForReading.<br>//<br>@property (assign) MKMapPoint <em>points;<br>@property (readonly) NSUInteger pointCount;<br>@property (assign) float </em>velocity;</p><p>-(void) unlockForReading;</p><p>@end<br>GradientPolylineOverlay.m</p><p>#import “GradientPolylineOverlay.h”</p><p>#import &lt;pthread.h&gt;</p><p>#define INITIAL_POINT_SPACE 1000</p><p>#define MINIMUM_DELTA_METERS 10.0</p><p>@implementation GradientPolylineOverlay{<br>}</p><p>@synthesize points, pointCount, velocity;</p><p>-(id) initWithCenterCoordinate:(CLLocationCoordinate2D)coord{<br>    self = [super init];<br>    if (self){<br>        //initialize point storage and place this first coordinate in it<br>        pointSpace = INITIAL_POINT_SPACE;<br>        points = malloc(sizeof(MKMapPoint)*pointSpace);<br>        points[0] = MKMapPointForCoordinate(coord);<br>        pointCount = 1;</p><pre><code>    //bite off up to 1/4 of the world to draw into    MKMapPoint origin = points[0];    origin.x -= MKMapSizeWorld.width/8.0;    origin.y -= MKMapSizeWorld.height/8.0;    MKMapSize size = MKMapSizeWorld;    size.width /=4.0;    size.height /=4.0;    boundingMapRect = (MKMapRect) {origin, size};    MKMapRect worldRect = MKMapRectMake(0, 0, MKMapSizeWorld.width, MKMapSizeWorld.height);    boundingMapRect = MKMapRectIntersection(boundingMapRect, worldRect);    // initialize read-write lock for drawing and updates    pthread_rwlock_init(&amp;rwLock,NULL);}return self;</code></pre><p>}</p><p>-(id) initWithPoints:(CLLocationCoordinate2D<em>)_points velocity:(float </em>)_velocity count:(NSUInteger)_count{<br>    self = [super init];<br>    if (self){<br>        pointCount = _count;<br>        self.points = malloc(sizeof(MKMapPoint)*pointCount);<br>        for (int i=0; i&lt;_count; i++){<br>            self.points[i] = MKMapPointForCoordinate(_points[i]);<br>        }</p><pre><code>    self.velocity = malloc(sizeof(float)*pointCount);    for (int i=0; i&lt;_count;i++){        self.velocity[i] = _velocity[i];    }    //bite off up to 1/4 of the world to draw into    MKMapPoint origin = points[0];    origin.x -= MKMapSizeWorld.width/8.0;    origin.y -= MKMapSizeWorld.height/8.0;    MKMapSize size = MKMapSizeWorld;    size.width /=4.0;    size.height /=4.0;    boundingMapRect = (MKMapRect) {origin, size};    MKMapRect worldRect = MKMapRectMake(0, 0, MKMapSizeWorld.width, MKMapSizeWorld.height);    boundingMapRect = MKMapRectIntersection(boundingMapRect, worldRect);    // initialize read-write lock for drawing and updates    pthread_rwlock_init(&amp;rwLock,NULL);}return self;</code></pre><p>}</p><p>-(void)dealloc{<br>    free(points);<br>    free(velocity);<br>    pthread_rwlock_destroy(&amp;rwLock);<br>}</p><p>//center<br>-(CLLocationCoordinate2D)coordinate{<br>    return MKCoordinateForMapPoint(points[0]);<br>}</p><p>-(MKMapRect)boundingMapRect{<br>    return boundingMapRect;<br>}</p><p>-(void) lockForReading{<br>    pthread_rwlock_rdlock(&amp;rwLock);<br>}</p><p>-(void) unlockForReading{<br>    pthread_rwlock_unlock(&amp;rwLock);<br>}</p><p>-(MKMapRect)addCoordinate:(CLLocationCoordinate2D)coord{<br>    //Acquire the write lock because we are going to changing the list of points<br>    pthread_rwlock_wrlock(&amp;rwLock);</p><pre><code>//Convert a CLLocationCoordinate2D to an MKMapPointMKMapPoint newPoint = MKMapPointForCoordinate(coord);MKMapPoint prevPoint = points[pointCount-1];//Get the distance between this new point and previous pointCLLocationDistance metersApart = MKMetersBetweenMapPoints(newPoint, prevPoint);MKMapRect updateRect = MKMapRectNull;if (metersApart &gt; MINIMUM_DELTA_METERS){    //Grow the points array if necessary    if (pointSpace == pointCount){        pointSpace *= 2;        points = realloc(points, sizeof(MKMapPoint) * pointSpace);    }    //Add the new point to points array    points[pointCount] = newPoint;    pointCount++;    //Compute MKMapRect bounding prevPoint and newPoint    double minX = MIN(newPoint.x,prevPoint.x);    double minY = MIN(newPoint.y,prevPoint.y);    double maxX = MAX(newPoint.x, prevPoint.x);    double maxY = MAX(newPoint.y, prevPoint.y);    updateRect = MKMapRectMake(minX, minY, maxX - minX, maxY - minY);}pthread_rwlock_unlock(&amp;rwLock);return updateRect;</code></pre><p>}</p><p>@end</p><p>下面是在mapview上添加PolyLine的方法：([self smoothTrack] 是我针对项目需求做速度平滑渐变的算法，可以忽略；我绘制轨迹的坐标数据结构是由精度、维度、速度构成的字典；最后添加的方法是调用mapview的分类中的方法，所以有级别，也是根我需求相关，可直接用[self.mapView addOverlay:self.polyline] 代替)</p><p>NSMutableArray <em>smoothTrackArray = [self smoothTrack];<br>    double count = smoothTrackArray.count;<br>    CLLocationCoordinate2D </em>points;<br>    float <em>velocity;<br>    points = malloc(sizeof(CLLocationCoordinate2D)</em>count);<br>    velocity = malloc(sizeof(float)*count);</p><pre><code>for(int i=0;i&lt;count;i++){    NSDictionary *dic = [smoothTrackArray objectAtIndex:i];    CLLocationDegrees latitude  = [dic[@&quot;latitude&quot;] doubleValue];    CLLocationDegrees longitude = [dic[@&quot;longitude&quot;] doubleValue];    CLLocationCoordinate2D coordinate = CLLocationCoordinate2DMake(latitude, longitude);    velocity[i] = [dic[@&quot;speed&quot;] doubleValue];    points[i] = coordinate;}self.polyline = [[GradientPolylineOverlay alloc] initWithPoints:points velocity:velocity count:count];[self.mapView addOverlay:self.polyline level:1];</code></pre><p>轨迹添加好了，还需要在渲染器上面呈现，会调用Mapkit相应的代理：(GradientPolylineRenderer 则是与之对应的渲染器)</p><p>#pragma mark -</p><p>#pragma mark - MKMap Delegate</p><ul><li>(MKOverlayRenderer <em>)mapView:(MKMapView </em>)mapView rendererForOverlay:(id <mkoverlay>)overlay{<br>  if([overlay isKindOfClass:[GradientPolylineOverlay class]]){<pre><code>//轨迹GradientPolylineRenderer *polylineRenderer = [[GradientPolylineRenderer alloc] initWithOverlay:overlay];polylineRenderer.lineWidth = 8.f;return polylineRenderer;</code></pre>  }<br>  return nil;<br>}<br>GradientPolylineRenderer.h实现：</mkoverlay></li></ul><p>#import &lt;MapKit/MapKit.h&gt;</p><p>@interface GradientPolylineRenderer : MKOverlayPathRenderer</p><p>@end<br>GradientPolylineRenderer.m实现：(上面的几个宏定义，是速度的边界值，以及对应的颜色边界值；另外我这里会对hues[i]是否为0做判断，项目需求要区分暂停点和速度过快点，已防作弊，此种情况会用虚线代替，如果只绘制渐变实线，不用管这)</p><p>#import “GradientPolylineRenderer.h”</p><p>#import &lt;pthread.h&gt;</p><p>#import “GradientPolylineOverlay.h”</p><p>#import “Constant.h”</p><p>#define V_MAX 4.5</p><p>#define V_MIN 1.0</p><p>#define H_MAX 0.33</p><p>#define H_MIN 0.03</p><p>@implementation GradientPolylineRenderer{<br>    float<em> hues;<br>    pthread_rwlock_t rwLock;<br>    GradientPolylineOverlay</em> polyline;<br>}</p><ul><li>(id) initWithOverlay:(id<mkoverlay>)overlay{<br>  self = [super initWithOverlay:overlay];<br>  if (self){<pre><code>pthread_rwlock_init(&amp;rwLock,NULL);polyline = ((GradientPolylineOverlay*)self.overlay);float *velocity = polyline.velocity;int count = (int)polyline.pointCount;[self velocity:velocity ToHue:&amp;hues count:count];[self createPath];</code></pre>  }<br>  return self;<br>}<br>/**<ul><li>Convert velocity to Hue using specific formular.<br>*</li><li>H(v) = Hmax, (v &gt; Vmax)</li><li>= Hmin + ((v-Vmin)*(Hmax-Hmin))/(Vmax-Vmin), (Vmin &lt;= v &lt;= Vmax)</li><li>= Hmin, (v &lt; Vmin)<br>*</li><li>@param velocity Velocity list.</li><li>@param count    count of velocity list.<br>*</li><li>@return An array of hues mapping each velocity.<br>*/</li></ul></mkoverlay></li><li><p>(void) velocity:(float<em>)velocity ToHue:(float**)_hue count:(int)count{  </em>_hue = malloc(sizeof(float)*count);<br>  for (int i=0;i&lt;count;i++){</p><pre><code>float curVelo = velocity[i];</code></pre><p>//        //原有渐变公式<br>//        curVelo = ((curVelo &lt; V_MIN) ? V_MIN : (curVelo  &gt; V_MAX) ? V_MAX : curVelo);<br>//        (<em>_hue)[i] = H_MIN + ((curVelo-V_MIN)</em>(H_MAX-H_MIN))/(V_MAX-V_MIN);</p><pre><code>if(curVelo&gt;0.){    curVelo = ((curVelo &lt; V_MIN) ? V_MIN : (curVelo  &gt; V_MAX) ? V_MAX : curVelo);    (*_hue)[i] = H_MIN + ((curVelo-V_MIN)*(H_MAX-H_MIN))/(V_MAX-V_MIN);}else{    //暂停颜色    (*_hue)[i] = 0.;}</code></pre><p>  }<br>}</p></li></ul><p>-(void) createPath{<br>    CGMutablePathRef path = CGPathCreateMutable();<br>    BOOL pathIsEmpty = YES;<br>    for (int i=0;i&lt; polyline.pointCount;i++){<br>        CGPoint point = [self pointForMapPoint:polyline.points[i]];<br>        if (pathIsEmpty){<br>            CGPathMoveToPoint(path, nil, point.x, point.y);<br>            pathIsEmpty = NO;<br>        } else {<br>            CGPathAddLineToPoint(path, nil, point.x, point.y);<br>        }<br>    }</p><pre><code>pthread_rwlock_wrlock(&amp;rwLock);self.path = path; //&lt;—— don&apos;t forget this line.pthread_rwlock_unlock(&amp;rwLock);</code></pre><p>}</p><p>//-(BOOL)canDrawMapRect:(MKMapRect)mapRect zoomScale:(MKZoomScale)zoomScale{<br>//    CGRect pointsRect = CGPathGetBoundingBox(self.path);<br>//    CGRect mapRectCG = [self rectForMapRect:mapRect];<br>//    return CGRectIntersectsRect(pointsRect, mapRectCG);<br>//}</p><ul><li><p>(void) drawMapRect:(MKMapRect)mapRect zoomScale:(MKZoomScale)zoomScale inContext:(CGContextRef)context{</p><p>  //put this blok into the canDraw method cause problem<br>  CGRect pointsRect = CGPathGetBoundingBox(self.path);<br>  CGRect mapRectCG = [self rectForMapRect:mapRect];<br>  if (!CGRectIntersectsRect(pointsRect, mapRectCG))return;<br>  CGContextSetLineCap(context, kCGLineCapRound);<br>  CGContextSetLineJoin(context, kCGLineJoinRound);<br>  UIColor<em> pcolor,</em>ccolor;<br>  for (int i=0;i&lt; polyline.pointCount;i++){</p><pre><code>CGPoint point = [self pointForMapPoint:polyline.points[i]];CGMutablePathRef path = CGPathCreateMutable();if(hues[i]==0.){    //虚线    if(i==0){        CGPathMoveToPoint(path, nil, point.x, point.y);    }else{        //颜色        CGContextSetRGBStrokeColor(context, 153.0 / 255.0, 153.0 / 255.0, 153.0 / 255.0, 1.0);        //线宽        CGFloat lineWidth = CGContextConvertSizeToUserSpace(context, (CGSize){self.lineWidth,self.lineWidth}).width;        CGContextSetLineWidth(context, lineWidth);        CGFloat lengths[] = {lineWidth*2,lineWidth*2};//设置虚线        CGContextSetLineDash(context, lineWidth, lengths, 2);//设置虚线        CGPoint prevPoint = [self pointForMapPoint:polyline.points[i-1]];        CGPathMoveToPoint(path, nil, prevPoint.x, prevPoint.y);        CGPathAddLineToPoint(path, nil, point.x, point.y);        CGContextAddPath(context, path);        CGContextStrokePath(context);    }}else{    //跑步渐变    ccolor = [UIColor colorWithHue:hues[i] saturation:1.0f brightness:1.0f alpha:1.0f];    if (i==0){        CGPathMoveToPoint(path, nil, point.x, point.y);    } else {        CGPoint prevPoint = [self pointForMapPoint:polyline.points[i-1]];        CGPathMoveToPoint(path, nil, prevPoint.x, prevPoint.y);        CGPathAddLineToPoint(path, nil, point.x, point.y);        CGFloat pc_r,pc_g,pc_b,pc_a,        cc_r,cc_g,cc_b,cc_a;        [pcolor getRed:&amp;pc_r green:&amp;pc_g blue:&amp;pc_b alpha:&amp;pc_a];        [ccolor getRed:&amp;cc_r green:&amp;cc_g blue:&amp;cc_b alpha:&amp;cc_a];        CGFloat gradientColors[8] = {pc_r,pc_g,pc_b,pc_a,            cc_r,cc_g,cc_b,cc_a};        CGFloat gradientLocation[2] = {0,1};        CGContextSaveGState(context);        CGFloat lineWidth = CGContextConvertSizeToUserSpace(context, (CGSize){self.lineWidth,self.lineWidth}).width;        CGPathRef pathToFill = CGPathCreateCopyByStrokingPath(path, NULL, lineWidth, self.lineCap, self.lineJoin, self.miterLimit);        CGContextAddPath(context, pathToFill);        CGContextClip(context);        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();        CGGradientRef gradient = CGGradientCreateWithColorComponents(colorSpace, gradientColors, gradientLocation, 2);        CGColorSpaceRelease(colorSpace);        CGPoint gradientStart = prevPoint;        CGPoint gradientEnd = point;        CGContextDrawLinearGradient(context, gradient, gradientStart, gradientEnd, kCGGradientDrawsAfterEndLocation);        CGGradientRelease(gradient);        CGContextRestoreGState(context);        pcolor = [UIColor colorWithCGColor:ccolor.CGColor];    }}</code></pre><p>  }<br>}<br>@end</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚来苏宁接触到的业务并不多，既然要写博客那就暂时上一篇之前所遇到的关于在地图控件中如何添加渐变色路径实现方案吧。&lt;/p&gt;
&lt;p&gt;整体实现原理是依据用户跑步配速将坐标点等分为若干色块，将色块相连就形成了渐变色轨迹&lt;/p&gt;
&lt;p&gt;如何在iPhone上绘制mapView就不说了，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IOS音视频分片缓存库IdiotAVPlayer</title>
    <link href="http://snsfrontend.crysnower.cn/IOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%88%86%E7%89%87%E7%BC%93%E5%AD%98%E5%BA%93IdiotAVPlayer.html"/>
    <id>http://snsfrontend.crysnower.cn/IOS音视频分片缓存库IdiotAVPlayer.html</id>
    <published>2018-04-28T09:07:00.000Z</published>
    <updated>2018-05-21T06:19:56.823Z</updated>
    
    <content type="html"><![CDATA[<p>boss让我写博客，说能装X，我就来了！！！☺️</p><p>这篇文章最先发布在简书上，今天先拿过来做开山篇。</p><p>额~~文采不好，不知道怎么写</p><p>来吧，直接切入正题，给大家看看效果吧，免得不是大家想要的东西，浪费大家的宝贵时间。<br><img src="/images/9724987-ce428f8e23f1ec53.gif" alt="IdiotAVPlayer 效果图"><br>本来想给大家看视频的，但是不知道怎么放，哈哈哈。</p><p>再来看IdiotAVplayer实现了什么功能吧。</p><p>相信大家看完上面的图片，大概就知道IdiotAVplayer实现了怎样的功能了，主要就是在选择时间后（seek操作），之前加载的部分会被保存，下次打开会按需加载。本地有数据就从本地取，没有就从网络取（前提是服务器支持Rang，不然没法获取指定区间的数据）。目前为止，网上最多的关于缓存的文章就是AVAssetResourceLoader，但是绝大多数不能再seek动作之后继续缓存，每次seek之后整个音视频就从seek的时间开始了，seek之前的都作废。那么怎么才能实现一个分片缓存的播放器呢？</p><p>目前为止，就我搜索到的开源框架有唱吧团队提供的 KTVHTTPCache（可能还有其他的），是不错。但是它很重，不够轻量。下面引用下唱吧github文章的一段</p><pre><code>方案演进在音视频缓存上，我们一共采用过如下 4 个方案：AVPlayer 纯在线播放。AVPlayer + AVAssetResourceLoader + 下载模块。AVPlayer + 一个开源的缓存项目（同样基于 AVAssetResourceLoader + 下载模块）。AVPlayer + KTVHTTPCache。方案 1 简单直接，缺点也不必多说。方案 2 的下载模块设计的比较简单，只能顺序下载，不支持分片。导致只能 Seek 到已下载完的地方，在用户体验上会有较大的缺陷。方案 3 在功能上已经可以满足需求，但在使用中问题较多，我们在源码基础上做了很多修改来填坑。但稳定性依然不是很理想，上线不长时间就将该功能下掉了。方案 4 是唱吧现在的线上方案，目前在我们的使用场景中还没有发现问题。除稳定性的提升外，比较大的改进是增加了全路径的 Log 模块。若用户或测试同学遇到问题，只需简单描述并回传 Log，就可以快速定位到原因，大大提高了调试效率。</code></pre><p>既然觉得唱吧框架很重，那就去寻求比较轻量级的解决方案。因为我开发的app也是重音视频业务的。造个轮子出来是一劳永逸的事情。</p><p>方案一是纯在线，略过。</p><p>方案二就是大家熟知的AVPlayer + AVAssetResourceLoader。这里我思考了下，既然通过自己的加载方式把数据返回给了AVAssetResourceLoader，那么就应该有办法保存那些已经下载的数据（IdiotAVPlayer就是基于这么个方案）。</p><p>原理图（不会画，将就着看吧）<br><img src="/images/9724987-5e2ca99d7359df7e.png" alt="不会画，将就着看吧"></p><p>（有朋友反映，有些视频下载不下来，不知道是不是网络问题，还是视频格式问题，我也不懂啊，后面请教我boss 哈哈😝）</p><p>好了，今天先装到这里吧</p><p><a href="https://github.com/nikolamht/IdiotAVPlayer" target="_blank" rel="noopener">代码</a></p><p>待续（其实我也不知道有没有后续）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;boss让我写博客，说能装X，我就来了！！！☺️&lt;/p&gt;
&lt;p&gt;这篇文章最先发布在简书上，今天先拿过来做开山篇。&lt;/p&gt;
&lt;p&gt;额~~文采不好，不知道怎么写&lt;/p&gt;
&lt;p&gt;来吧，直接切入正题，给大家看看效果吧，免得不是大家想要的东西，浪费大家的宝贵时间。&lt;br&gt;&lt;img s
      
    
    </summary>
    
      <category term="iOS" scheme="http://snsfrontend.crysnower.cn/categories/iOS/"/>
    
    
      <category term="边下边播" scheme="http://snsfrontend.crysnower.cn/tags/%E8%BE%B9%E4%B8%8B%E8%BE%B9%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>玩转表格：在android上使用ECharts</title>
    <link href="http://snsfrontend.crysnower.cn/%E7%8E%A9%E8%BD%AC%E8%A1%A8%E6%A0%BC%EF%BC%9A%E5%9C%A8android%E4%B8%8A%E4%BD%BF%E7%94%A8ECharts.html"/>
    <id>http://snsfrontend.crysnower.cn/玩转表格：在android上使用ECharts.html</id>
    <published>2018-04-28T07:56:00.000Z</published>
    <updated>2018-05-20T07:19:13.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>支持原创，转载请注明出处</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做Android开发经常会需要画一些图表，自己写的话不仅麻烦而且工作量太大，所以一般都会采用第三方图表框架，现在给大家介绍一款功能非常丰富的图表框架 <a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">ECharts</a> 。</p><p>#准备<br>ECharts 是由百度开发提供的开源框架，主要提供给Web使用，所以Android中一般使用WebView加载显示，其实本质上也就是用 WebView 加载本地 H5。<br>ECharts的图表样式主要由option控制，option是由js编写，如下面代码就是一个简单折线图的option。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: &apos;category&apos;,</span><br><span class="line">        data: [&apos;Mon&apos;, &apos;Tue&apos;, &apos;Wed&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: &apos;value&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">        type: &apos;line&apos;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在andorid中使用ECharts,一般来讲我们有两种实现方案</p><ul><li>Android获取数据并封装好option，然后传递给h5，h5再对数据进行解析，调用ECharts绘制。<br>这种方案的难点在于option的属性太多了，封装起来太麻烦。</li><li>h5处理所有操作，进行获取数据，并调用ECharts进行绘制。<br>这种方案需要对js比较熟悉。</li></ul><p>这里我们采用第一种方案，因为前人栽树后人乘凉，已经有大神帮我们做好最困难的数据封装工作：<a href="https://link.jianshu.com?t=https://github.com/abel533/ECharts" target="_blank" rel="noopener">EChart java 对象库</a></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h5 id="配置ECharts"><a href="#配置ECharts" class="headerlink" title="配置ECharts"></a>配置ECharts</h5><ul><li>下载Echarts。你可以根据你的需求在ECharts官网<a href="http://echarts.baidu.com/download.html" target="_blank" rel="noopener">下载</a>需要的ECharts组件。我这里选择的是完整版。</li><li>将下载好的<code>echarts.min.js</code>文件放入工程中<code>assets</code>目录下。如果没有<code>assets</code>目录，可以先在<code>mian</code>目录下，通过右击 new -&gt; Folder -&gt; Assets Folder 创建。<br><img src="/images/assets.png" alt="assets.png"></li><li>编写echarts.html文件，并将echarts.html放入assets目录。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html style=&quot;height: 100%&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body style=&quot;height: 100%; margin: 0&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;container&quot; style=&quot;height: 100%&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;./echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            var dom =document.getElementById(&quot;container&quot;);</span><br><span class="line">            var myChart =echarts.init(dom);</span><br><span class="line">            var app =&#123;&#125;;</span><br><span class="line">            function loadEcharts(echartJson)&#123;</span><br><span class="line">                var option = JSON.parse(echartJson);</span><br><span class="line">                if (option &amp;&amp;typeof option ===&quot;object&quot;) &#123;</span><br><span class="line">                    myChart.setOption(option,true);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="依赖EChart-java-对象库"><a href="#依赖EChart-java-对象库" class="headerlink" title="依赖EChart java 对象库"></a>依赖EChart java 对象库</h5><blockquote><p>注意：因为该对象库依赖Gson，所以project同样需要添加Gson依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.github.abel533:ECharts:3.0.0.2&apos;</span><br><span class="line">    implementation &apos;com.google.code.gson:gson:2.8.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>因为Echarts需要在WebView中显示，所以我们直接自定义一个EchartView继承自WebView用来显示图表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class EchartView extends WebView &#123;</span><br><span class="line">    private static final String TAG = EchartView.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    public EchartView(Context context) &#123;</span><br><span class="line">        this(context, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public EchartView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public EchartView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void init() &#123;</span><br><span class="line">        WebSettings webSettings = getSettings();</span><br><span class="line">        webSettings.setJavaScriptEnabled(true);</span><br><span class="line">        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);</span><br><span class="line">        webSettings.setSupportZoom(false);</span><br><span class="line">        webSettings.setDisplayZoomControls(false);</span><br><span class="line">        loadUrl(&quot;file:///android_asset/echarts.html&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**刷新图表</span><br><span class="line">     * java调用js的loadEcharts方法刷新echart</span><br><span class="line">     * 不能在第一时间就用此方法来显示图表，因为第一时间html的标签还未加载完成，不能获取到标签值</span><br><span class="line">     * @param option</span><br><span class="line">     */</span><br><span class="line">    public void refreshEchartsWithOption(GsonOption option) &#123;</span><br><span class="line">        if (option == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String optionString = option.toString();</span><br><span class="line">        String call = &quot;javascript:loadEcharts(&apos;&quot; + optionString + &quot;&apos;)&quot;;</span><br><span class="line">        loadUrl(call);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个工具类用来将数据封装为option，这里只封装了一个简单的折线图做例子。<br>更多图表的封装请参照<code>EChart java 对象库</code>和<a href="http://echarts.baidu.com/examples/index.html" target="_blank" rel="noopener">ECharts官方例子</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class EchartOptionUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static GsonOption getLineChartOptions(Object[] xAxis, Object[] yAxis) &#123;</span><br><span class="line">        GsonOption option = new GsonOption();</span><br><span class="line">        option.title(&quot;折线图&quot;);</span><br><span class="line">        option.legend(&quot;销量&quot;);</span><br><span class="line">        option.tooltip().trigger(Trigger.axis);</span><br><span class="line"></span><br><span class="line">        ValueAxis valueAxis = new ValueAxis();</span><br><span class="line">        option.yAxis(valueAxis);</span><br><span class="line"></span><br><span class="line">        CategoryAxis categorxAxis = new CategoryAxis();</span><br><span class="line">        categorxAxis.axisLine().onZero(false);</span><br><span class="line">        categorxAxis.boundaryGap(true);</span><br><span class="line">        categorxAxis.data(xAxis);</span><br><span class="line">        option.xAxis(categorxAxis);</span><br><span class="line"></span><br><span class="line">        Line line = new Line();</span><br><span class="line">        line.smooth(false).name(&quot;销量&quot;).data(yAxis).itemStyle().normal().lineStyle().shadowColor(&quot;rgba(0,0,0,0.4)&quot;);</span><br><span class="line">        option.series(line);</span><br><span class="line">        return option;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Acitvity中显示<br>activity_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;com.example.ming.echartsforandroid.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.example.ming.echartsforandroid.EchartView</span><br><span class="line">        android:id=&quot;@+id/lineChart&quot;</span><br><span class="line">        android:layout_width=&quot;400dp&quot;</span><br><span class="line">        android:layout_height=&quot;400dp&quot;</span><br><span class="line">        android:layout_gravity=&quot;center&quot;&gt;</span><br><span class="line">    &lt;/com.example.ming.echartsforandroid.EchartView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><p>MainActivity .java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private EchartView lineChart;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        lineChart = findViewById(R.id.lineChart);</span><br><span class="line">        lineChart.setWebViewClient(new WebViewClient()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onPageFinished(WebView view, String url) &#123;</span><br><span class="line">                super.onPageFinished(view, url);</span><br><span class="line">                //最好在h5页面加载完毕后再加载数据，防止html的标签还未加载完成，不能正常显示</span><br><span class="line">                refreshLineChart();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void refreshLineChart()&#123;</span><br><span class="line">        Object[] x = new Object[]&#123;</span><br><span class="line">                &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object[] y = new Object[]&#123;</span><br><span class="line">                820, 932, 901, 934, 1290, 1330, 1320</span><br><span class="line">        &#125;;</span><br><span class="line">        lineChart.refreshEchartsWithOption(EchartOptionUtil.getLineChartOptions(x, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/Screenshot_2018-04-11-14-36-32-219_com.example.ming.echartsforandroid.png" alt="Screenshot_2018-04-11-14-36-32-219_com.example.ming.echartsforandroid.png"></p><p>#后记<br><a href="https://link.jianshu.com?t=https://github.com/abel533/ECharts" target="_blank" rel="noopener">EChart java 对象库</a>目前只封装了常用的十几种图表，所以如果需要用到更多的图表，建议直接下载EChart java 对象库代码，对其进行扩充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;支持原创，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;做Android开发经常会需要画一些图表，自己
      
    
    </summary>
    
      <category term="Android" scheme="http://snsfrontend.crysnower.cn/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>AboutUs</title>
    <link href="http://snsfrontend.crysnower.cn/AboutUs.html"/>
    <id>http://snsfrontend.crysnower.cn/AboutUs.html</id>
    <published>2018-04-28T05:58:00.000Z</published>
    <updated>2018-05-21T03:36:37.106Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Suning-Sports-Front-End-Team"><a href="#Suning-Sports-Front-End-Team" class="headerlink" title="Suning Sports Front-End Team."></a>Suning Sports Front-End Team.</h3><p><img src="/images/snteam.jpeg" alt="苏宁体育"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Suning-Sports-Front-End-Team&quot;&gt;&lt;a href=&quot;#Suning-Sports-Front-End-Team&quot; class=&quot;headerlink&quot; title=&quot;Suning Sports Front-End Team.&quot;&gt;&lt;/a&gt;S
      
    
    </summary>
    
      <category term="项目管理" scheme="http://snsfrontend.crysnower.cn/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>sourceTree使用注意事项</title>
    <link href="http://snsfrontend.crysnower.cn/sourceTree%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
    <id>http://snsfrontend.crysnower.cn/sourceTree使用注意事项.html</id>
    <published>2017-09-12T00:12:30.000Z</published>
    <updated>2018-05-21T06:24:37.598Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/52a9bb493dfae92bab000005.jpg" alt="sourceTree"></p><h1 id="sourceTree使用注意事项"><a href="#sourceTree使用注意事项" class="headerlink" title="sourceTree使用注意事项"></a>sourceTree使用注意事项</h1><ul><li>更正上次文档《关于文档类工作输出要求》的错误，其中<code>其中图片必须使用本地相对路径![imag](../images/xxx.png)</code>应该为<code>其中图片必须使用本地相对路径![imag](/images/xxx.png)</code></li><li>点击list条目进入sourceTree工程页面<br><img src="/images/gitlist.png" alt="image"><br><br></li><li>点击顶部菜单栏的“抓取-fetch”，然后勾选<code>删除在所有远端都已经不存在的跟踪（tracking）分支</code><br><img src="/images/gitmenu.png" alt="image"><br><br></li></ul><p>这样就可以了同步本地的分支（服务器上已被删除而本地却有）了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/52a9bb493dfae92bab000005.jpg&quot; alt=&quot;sourceTree&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;sourceTree使用注意事项&quot;&gt;&lt;a href=&quot;#sourceTree使用注意事项&quot; class=&quot;header
      
    
    </summary>
    
      <category term="项目管理" scheme="http://snsfrontend.crysnower.cn/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="http://snsfrontend.crysnower.cn/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
